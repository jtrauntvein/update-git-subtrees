/* $HeadURL: svn://engsoft/cora/coratools/Cora.DataSources.KonectSource.h $

Copyright (C) 2014, 2017 Campbell Scientific, Inc.
Started On: Tuesday, April 22, 2014

Started By: Tyler Mecham
$LastChangedBy: jon $
$LastChangedDate: 2017-04-03 16:25:43 -0600 (Mon, 03 Apr 2017) $
$LastChangedRevision: 29880 $
*/


#pragma once
#ifndef Cora_DataSources_KonectSource_h
#define Cora_DataSources_KonectSource_h

#include "Cora.DataSources.SymbolBase.h"
#include "Cora.DataSources.SourceBase.h"
#include "OneShot.h"
#include "Scheduler.h"
#include "Csi.HttpClient.h"
#include "Csi.PolySharedPtr.h"
#include "Cora.DataSources.KonectSymbol.h"


namespace Cora
{
   namespace DataSources
   {
      namespace KonectSourceHelpers
      {
         class Cursor;


         class AuthorisationOAuth: public Csi::HttpClient::AuthorisationBase
         {
         private:
            typedef std::pair<StrAsc, StrAsc> token_type;
            typedef std::deque<token_type> tokens_type;
            tokens_type tokens;
            StrAsc const signing_key;
            
         public:
            AuthorisationOAuth(StrAsc const &access_token, StrAsc const &signing_key_);
            
            virtual void write_authorisation(Csi::HttpClient::Request *request, std::ostream &out);
         };
      };

      class KonectSourceSymbol;

      ////////////////////////////////////////////////////////////
      // class KonectSource
      //
      // Defines a data source that uses the konect web services to respond
      // to client requests.
      ////////////////////////////////////////////////////////////
      class KonectSource: 
         public SourceBase,
         public OneShotClient,
         public SchedulerClient,
         public Csi::HttpClient::RequestClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         KonectSource(StrUni const &source_name);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~KonectSource();

         ////////////////////////////////////////////////////////////
         // set_manager
         ////////////////////////////////////////////////////////////
         virtual void set_manager(Manager *manager);

         ////////////////////////////////////////////////////////////
         // connect
         ////////////////////////////////////////////////////////////
         virtual void connect();

         ////////////////////////////////////////////////////////////
         // disconnect
         ////////////////////////////////////////////////////////////
         virtual void disconnect();

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // get_properties
         ////////////////////////////////////////////////////////////
         virtual void get_properties(Csi::Xml::Element &prop_xml);

         ////////////////////////////////////////////////////////////
         // set_properties
         ////////////////////////////////////////////////////////////
         virtual void set_properties(Csi::Xml::Element &prop_xml);

         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         virtual void start();

         ////////////////////////////////////////////////////////////
         // add_request
         ////////////////////////////////////////////////////////////
         virtual void add_request(
            request_handle &request, bool more_to_follow = false);

         ////////////////////////////////////////////////////////////
         // remove_request
         ////////////////////////////////////////////////////////////
         virtual void remove_request(request_handle &request);

         ////////////////////////////////////////////////////////////
         // remove_all_requests
         ////////////////////////////////////////////////////////////
         virtual void remove_all_requests();

         ////////////////////////////////////////////////////////////
         // activate_requests
         ////////////////////////////////////////////////////////////
         virtual void activate_requests();

         ////////////////////////////////////////////////////////////
         // get_type
         ////////////////////////////////////////////////////////////
         virtual SymbolBase::symbol_type_code get_type()
         {
            return SymbolBase::type_konect_source;
         }

         ////////////////////////////////////////////////////////////
         // get_source_symbol
         ////////////////////////////////////////////////////////////
         virtual symbol_handle get_source_symbol();

         ////////////////////////////////////////////////////////////
         // breakdown_uri
         ////////////////////////////////////////////////////////////
         virtual void breakdown_uri(symbols_type &symbols, StrUni const &uri);

         ////////////////////////////////////////////////////////////
         // enable_poll_schedule
         ////////////////////////////////////////////////////////////
         virtual void enable_poll_schedule(bool enabled)
         {
            poll_schedule_enabled = enabled;
         }

         static StrAsc const consumer_key;
         static StrAsc const consumer_secret;

         // @group: property names

         static StrUni const konect_pin_name;
         static StrUni const poll_schedule_base_name;
         static StrUni const poll_schedule_interval_name;
         static StrUni const oauth_access_token_name;
         static StrUni const oauth_access_token_secret_name;

         // @endgroup:

         // @group: class RequestClient derived definitions

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Request http_request;
         virtual bool on_failure(http_request *request);

         ////////////////////////////////////////////////////////////
         // on_response_complete
         ////////////////////////////////////////////////////////////
         virtual bool on_response_complete(http_request *request);

         // @endgroup

         ////////////////////////////////////////////////////////////
         // onOneShotFired
         ////////////////////////////////////////////////////////////
         virtual void onOneShotFired(uint4 id);

         ////////////////////////////////////////////////////////////
         // onScheduledEvent
         ////////////////////////////////////////////////////////////
         virtual void onScheduledEvent(uint4 id);

         ////////////////////////////////////////////////////////////
         // get_konect_pin
         ////////////////////////////////////////////////////////////
         StrAsc const &get_konect_pin() const
         {
            return konect_pin;
         }

         ////////////////////////////////////////////////////////////
         // get_connection
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Connection http_connection_type;
         typedef Csi::SharedPtr<http_connection_type> http_connection_handle;
         http_connection_handle get_connection()
         {
            if(connection == 0)
               connection.bind(new http_connection_type);
            return connection;
         }

         ////////////////////////////////////////////////////////////
         // get_oauth_access_token
         ////////////////////////////////////////////////////////////
         StrAsc const &get_oauth_access_token();

         ////////////////////////////////////////////////////////////
         // get_oauth_access_token_secret
         ////////////////////////////////////////////////////////////
         StrAsc const &get_oauth_access_token_secret();

         ////////////////////////////////////////////////////////////
         // get_signing_key
         ////////////////////////////////////////////////////////////
         StrAsc const &get_signing_key();

         ////////////////////////////////////////////////////////////
         // remove_cursor
         ////////////////////////////////////////////////////////////
         typedef KonectSourceHelpers::Cursor cursor_type;
         void remove_cursor(cursor_type *cursor);

         private:
            ////////////////////////////////////////////////////////////
            // konect_pin
            ////////////////////////////////////////////////////////////
            StrAsc konect_pin;

            ////////////////////////////////////////////////////////////
            // oauth_access_token
            ////////////////////////////////////////////////////////////
            StrAsc oauth_access_token;
            StrAsc decrypted_oauth_access_token;

            ////////////////////////////////////////////////////////////
            // oauth_access_token_secret
            ////////////////////////////////////////////////////////////
            StrAsc oauth_access_token_secret;
            StrAsc decrypted_oauth_access_token_secret;

            ////////////////////////////////////////////////////////////
            // poll_schedule_base
            ////////////////////////////////////////////////////////////
            Csi::LgrDate poll_schedule_base;

            ////////////////////////////////////////////////////////////
            // poll_schedule_interval
            ////////////////////////////////////////////////////////////
            uint4 poll_schedule_interval;

            ////////////////////////////////////////////////////////////
            // was_connected
            ////////////////////////////////////////////////////////////
            bool was_connected;

            ////////////////////////////////////////////////////////////
            // connect_active
            ////////////////////////////////////////////////////////////
            bool connect_active;

            ////////////////////////////////////////////////////////////
            // connection
            ////////////////////////////////////////////////////////////
            Csi::SharedPtr<http_connection_type> connection;

            ////////////////////////////////////////////////////////////
            // connect_request
            ////////////////////////////////////////////////////////////
            Csi::SharedPtr<http_request> connect_request;

            ////////////////////////////////////////////////////////////
            // retry_id
            ////////////////////////////////////////////////////////////
            uint4 retry_id;

            ////////////////////////////////////////////////////////////
            // timer
            ////////////////////////////////////////////////////////////
            Csi::SharedPtr<OneShot> timer;

            ////////////////////////////////////////////////////////////
            // scheduler
            ////////////////////////////////////////////////////////////
            Csi::SharedPtr<Scheduler> scheduler;

            ////////////////////////////////////////////////////////////
            // poll_schedule_id
            ////////////////////////////////////////////////////////////
            uint4 poll_schedule_id;

            ////////////////////////////////////////////////////////////
            // poll_schedule_enabled
            ////////////////////////////////////////////////////////////
            bool poll_schedule_enabled;

            ////////////////////////////////////////////////////////////
            // symbol
            ////////////////////////////////////////////////////////////
            Csi::PolySharedPtr<SymbolBase, KonectSourceSymbol> symbol;

            ////////////////////////////////////////////////////////////
            // signing_key
            ////////////////////////////////////////////////////////////
            StrAsc signing_key;

            ////////////////////////////////////////////////////////////
            // cursors
            ////////////////////////////////////////////////////////////
            typedef Csi::SharedPtr<cursor_type> cursor_handle;
            typedef std::list<cursor_handle> cursors_type;
            cursors_type cursors;
      };
   };
};


#endif
