/* Csi.PakBus.TranEcho.h

   Copyright (C) 2003, 2012 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Friday 24 January 2003
   Last Change: Friday 30 November 2012
   Last Commit: $Date: 2012-11-30 13:08:23 -0600 (Fri, 30 Nov 2012) $ 
   Last Changed by: $Author: jon $

*/

#ifndef Csi_PakBus_TranEcho_h
#define Csi_PakBus_TranEcho_h

#include "Csi.PakBus.PakBusTran.h"
#include "Csi.InstanceValidator.h"
#include "LgrDate.h"


namespace Csi
{
   namespace PakBus
   {
      //@group class forward declarations
      class TranEcho;
      class PortBase;
      //@endgroup


      ////////////////////////////////////////////////////////////
      // class TranEchoClient
      //
      // Defines an interface for the object that will receive the completion event
      // from the echo transaction.
      ////////////////////////////////////////////////////////////
      class TranEchoClient: public Csi::InstanceValidator
      {
      public:
         ////////////////////////////////////////////////////////////
         // on_complete
         ////////////////////////////////////////////////////////////
         enum outcome_type
         {
            outcome_success = 0,
            outcome_communication_failed = 1,
            outcome_unreachable = 4,
            outcome_unsupported = 5,
            outcome_corrupted_echo = 6,
         };
         virtual void on_complete(
            TranEcho *transaction,
            outcome_type outcome) = 0;
      };


      ////////////////////////////////////////////////////////////
      // class TranEcho
      ////////////////////////////////////////////////////////////
      class TranEcho: public PakBusTran
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         typedef TranEchoClient client_type;
         TranEcho(
            Router *router,
            timer_handle &timer,
            priority_type priority,
            uint2 destination_address,
            client_type *client_,
            uint2 packet_size_,
            uint2 remote_client_ = 0,
            byte remote_tran_no_ = 0,
            uint2 ack_physical_dest_ = 0,
            PortBase *ack_port_ = 0);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~TranEcho();

         ////////////////////////////////////////////////////////////
         // get_start_time
         //
         // Returns the server time when the echo command was first sent
         ////////////////////////////////////////////////////////////
         LgrDate const &get_start_time() const
         { return start_time; }

         ////////////////////////////////////////////////////////////
         // get_end_time
         //
         // Returns the server time when the echo response was received or the transaction timed
         // out. 
         ////////////////////////////////////////////////////////////
         LgrDate const &get_end_time() const
         { return end_time; }

         ////////////////////////////////////////////////////////////
         // get_response_time
         //
         // Returns the device time when the echo command was processed.
         ////////////////////////////////////////////////////////////
         LgrDate const &get_response_time() const
         { return response_time; }

         ////////////////////////////////////////////////////////////
         // get_packet_size_used
         //
         // Returns the packet size that was used in the echo command.
         ////////////////////////////////////////////////////////////
         uint2 get_packet_size_used() const
         { return packet_size_used; }

      protected:
         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         virtual void start();

         ////////////////////////////////////////////////////////////
         // on_focus_start
         ////////////////////////////////////////////////////////////
         virtual void on_focus_start();

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         virtual void on_failure(failure_type failure);

         ////////////////////////////////////////////////////////////
         // on_sending_message
         ////////////////////////////////////////////////////////////
         virtual void on_sending_message(message_handle &message);
         
         ////////////////////////////////////////////////////////////
         // on_pakctrl_message
         ////////////////////////////////////////////////////////////
         virtual void on_pakctrl_message(pakctrl_message_handle &message);

         ////////////////////////////////////////////////////////////
         // get_transaction_description
         ////////////////////////////////////////////////////////////
         virtual void get_transaction_description(std::ostream &out)
         { out << "PakCtrl::Echo"; }

         ////////////////////////////////////////////////////////////
         // on_complete
         ////////////////////////////////////////////////////////////
         virtual void on_complete(TranEchoClient::outcome_type outcome);

      protected:
         ////////////////////////////////////////////////////////////
         // packet_size
         //
         // Specifies the size of the echo command that should be sent
         ////////////////////////////////////////////////////////////
         uint2 packet_size;

         ////////////////////////////////////////////////////////////
         // start_time
         ////////////////////////////////////////////////////////////
         LgrDate start_time;

         ////////////////////////////////////////////////////////////
         // end_time
         ////////////////////////////////////////////////////////////
         LgrDate end_time;

         ////////////////////////////////////////////////////////////
         // response_time
         ////////////////////////////////////////////////////////////
         LgrDate response_time;

         ////////////////////////////////////////////////////////////
         // client
         ////////////////////////////////////////////////////////////
         client_type *client;

         ////////////////////////////////////////////////////////////
         // packet_size_used
         ////////////////////////////////////////////////////////////
         uint2 packet_size_used;

         ////////////////////////////////////////////////////////////
         // remote_client
         //
         // Specifies the pakbus address of the client that requested this echo
         // transaction.  Zero if there is no such remote client
         ////////////////////////////////////////////////////////////
         uint2 remote_client;

         ////////////////////////////////////////////////////////////
         // remote_tran_no
         ////////////////////////////////////////////////////////////
         byte remote_tran_no;

         ////////////////////////////////////////////////////////////
         // ack_physical_dest
         ////////////////////////////////////////////////////////////
         uint2 ack_physical_dest;

         ////////////////////////////////////////////////////////////
         // ack_port
         ////////////////////////////////////////////////////////////
         PortBase *ack_port;
      };
   };
};


#endif
