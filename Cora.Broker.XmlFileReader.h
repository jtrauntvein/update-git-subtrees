/* Cora.Broker.XmlFileReader.h

   Copyright (C) 2006, 2016 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Thursday 07 September 2006
   Last Change: Monday 11 July 2016
   Last Commit: $Date: 2016-07-11 09:29:07 -0600 (Mon, 11 Jul 2016) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_Broker_XmlFileReader_h
#define Cora_Broker_XmlFileReader_h

#include "Cora.Broker.DataFileReader.h"


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class XmlFileReader
      //
      // Defines a file reader object that is able to parse CSIXML files. 
      ////////////////////////////////////////////////////////////
      class XmlFileReader: public DataFileReader
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         XmlFileReader(value_factory_handle value_factory_);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~XmlFileReader()
         { close(); }

         ////////////////////////////////////////////////////////////
         // open
         ////////////////////////////////////////////////////////////
         virtual void open(
            StrAsc const &file_name, StrAsc const &labels_file_name);

         ////////////////////////////////////////////////////////////
         // close
         ////////////////////////////////////////////////////////////
         virtual void close();

         ////////////////////////////////////////////////////////////
         // hibernate
         ////////////////////////////////////////////////////////////
         virtual void hibernate();

         ////////////////////////////////////////////////////////////
         // wake_up
         ////////////////////////////////////////////////////////////
         virtual bool wake_up(bool &all_data_overwritten);

         ////////////////////////////////////////////////////////////
         // read_next_record
         ////////////////////////////////////////////////////////////
         virtual read_outcome_type read_next_record(
            record_handle &destination,
            bool *file_mark_after_record = 0,
            bool *remove_mark_after_record = 0,
            uint4 array_id = 0);

         ////////////////////////////////////////////////////////////
         // generate_index
         ////////////////////////////////////////////////////////////
         virtual void generate_index(index_type &index, bool &should_abort, uint4 *next_record_no);

         ////////////////////////////////////////////////////////////
         // last_time_was_2400
         ////////////////////////////////////////////////////////////
         virtual bool last_time_was_2400() const;

         ////////////////////////////////////////////////////////////
         // get_header_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_header_len();

         ////////////////////////////////////////////////////////////
         // get_header_sig
         ////////////////////////////////////////////////////////////
         virtual uint2 get_header_sig();
         
         ////////////////////////////////////////////////////////////
         // get_data_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_len();

         ////////////////////////////////////////////////////////////
         // get_data_offset
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_offset();

         ////////////////////////////////////////////////////////////
         // seek_data
         ////////////////////////////////////////////////////////////
         virtual void seek_data(int8 data_offset, bool search_for_prev = true);

         ////////////////////////////////////////////////////////////
         // has_time_stamp
         ////////////////////////////////////////////////////////////
         virtual bool has_time_stamp() const
         { return data_has_time_stamp; }

         ////////////////////////////////////////////////////////////
         // has_record_no
         ////////////////////////////////////////////////////////////
         virtual bool has_record_no() const
         { return data_has_record_no; }

      private:
         ////////////////////////////////////////////////////////////
         // input
         ////////////////////////////////////////////////////////////
         FILE *input;

         ////////////////////////////////////////////////////////////
         // header_len
         ////////////////////////////////////////////////////////////
         uint4 header_len;

         ////////////////////////////////////////////////////////////
         // parse_buff
         ////////////////////////////////////////////////////////////
         StrAsc parse_buff;

         ////////////////////////////////////////////////////////////
         // file_name
         ////////////////////////////////////////////////////////////
         StrAsc file_name;

         ////////////////////////////////////////////////////////////
         // is_sleeping
         ////////////////////////////////////////////////////////////
         bool is_sleeping;

         ////////////////////////////////////////////////////////////
         // header_sig
         ////////////////////////////////////////////////////////////
         uint2 header_sig;

         ////////////////////////////////////////////////////////////
         // hibernate_pos
         ////////////////////////////////////////////////////////////
         int8 hibernate_pos;

         ////////////////////////////////////////////////////////////
         // data_sig
         ////////////////////////////////////////////////////////////
         uint2 data_sig;

         ////////////////////////////////////////////////////////////
         // data_len
         ////////////////////////////////////////////////////////////
         int8 data_len;

         ////////////////////////////////////////////////////////////
         // data_has_time_stamp
         ////////////////////////////////////////////////////////////
         bool data_has_time_stamp;

         ////////////////////////////////////////////////////////////
         // data_has_record_no
         ////////////////////////////////////////////////////////////
         bool data_has_record_no;

         ////////////////////////////////////////////////////////////
         // last_time_str
         ////////////////////////////////////////////////////////////
         StrAsc last_time_str;
      };
   };
};


#endif
