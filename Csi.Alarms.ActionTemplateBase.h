/* Csi.Alarms.ActionTemplateBase.h

   Copyright (C) 2012, 2012 Campbell Scientific, Inc.

   Written by: Jon Trauntvein 
   Date Begun: Wednesday 26 September 2012
   Last Change: Monday 01 October 2012
   Last Commit: $Date: 2012-10-01 14:52:37 -0600 (Mon, 01 Oct 2012) $
   Last Changed by: $Author: jon $

*/

#ifndef Csi_Alarms_ActionTemplateBase_h
#define Csi_Alarms_ActionTemplateBase_h

#include "Csi.Xml.Element.h"
#include "OneShot.h"


namespace Csi
{
   namespace Alarms
   {
      ////////////////////////////////////////////////////////////
      // class ActionTemplateBase
      //
      // Defines a base class for an object that is capable of generating
      // actions of a particular type for a class. 
      ////////////////////////////////////////////////////////////
      class Condition;
      class ActionTemplateBase: public OneShotClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         ActionTemplateBase(Condition *condition_);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~ActionTemplateBase();

         ////////////////////////////////////////////////////////////
         // make_template
         ////////////////////////////////////////////////////////////
         static ActionTemplateBase *make_template(
            Condition *condition, StrUni const &type_name);

         ////////////////////////////////////////////////////////////
         // read
         ////////////////////////////////////////////////////////////
         virtual void read(Xml::Element &elem);
            
         ////////////////////////////////////////////////////////////
         // write
         ////////////////////////////////////////////////////////////
         virtual void write(Xml::Element &elem);

         ////////////////////////////////////////////////////////////
         // get_type_name
         ////////////////////////////////////////////////////////////
         virtual StrUni get_type_name() const = 0;

         ////////////////////////////////////////////////////////////
         // on_alarm_on
         ////////////////////////////////////////////////////////////
         virtual void on_alarm_on();

         ////////////////////////////////////////////////////////////
         // on_alarm_off
         ////////////////////////////////////////////////////////////
         virtual void on_alarm_off();
         
         ////////////////////////////////////////////////////////////
         // onOneShotFired
         ////////////////////////////////////////////////////////////
         virtual void onOneShotFired(uint4 id);

         ////////////////////////////////////////////////////////////
         // get_timer
         ////////////////////////////////////////////////////////////
         SharedPtr<OneShot> &get_timer()
         { return timer; }

         ////////////////////////////////////////////////////////////
         // get_condition
         ////////////////////////////////////////////////////////////
         Condition *get_condition()
         { return condition; }

      protected:
         ////////////////////////////////////////////////////////////
         // perform_action
         ////////////////////////////////////////////////////////////
         virtual void perform_action() = 0; 

      protected:
         ////////////////////////////////////////////////////////////
         // component
         ////////////////////////////////////////////////////////////
         Condition *condition;

         ////////////////////////////////////////////////////////////
         // initial_delay
         ////////////////////////////////////////////////////////////
         uint4 initial_delay;

         ////////////////////////////////////////////////////////////
         // interval
         ////////////////////////////////////////////////////////////
         uint4 interval;
         
         ////////////////////////////////////////////////////////////
         // delay_id
         ////////////////////////////////////////////////////////////
         uint4 delay_id;

         ////////////////////////////////////////////////////////////
         // timer
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<OneShot> timer;
      };
   };
};


#endif
