/* $HeadURL: svn://engsoft/cora/coratools/Cora.DataSources.KonectSymbol.h $

Copyright (C) 2014, Campbell Scientific, Inc.
Started On: Tuesday, April 22, 2014

Started By: Tyler Mecham
$LastChangedBy: tmecham $
$LastChangedDate: 2014-06-30 21:55:29 -0600 (Mon, 30 Jun 2014) $
$LastChangedRevision: 21995 $
*/


#pragma once
#ifndef Cora_DataSources_KonectSourceSymbol_h
#define Cora_DataSources_KonectSourceSymbol_h

#include "Cora.DataSources.SymbolBase.h"
#include "Cora.DataSources.KonectSource.h"
#include "Cora.DataSources.TableFieldUri.h"


namespace Cora
{
   namespace DataSources
   {
      class KonectSource;

      ////////////////////////////////////////////////////////////
      // class KonectSourceSymbol
      ////////////////////////////////////////////////////////////
      class KonectSourceSymbol:
         public SymbolBase,
         public Csi::HttpClient::RequestClient
      {
      public:
         static StrUni const konect_guids_name;
         static StrUni const konect_guid_name;
         static StrUni const key_name;
         static StrUni const guid_name;

         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         KonectSourceSymbol(KonectSource *source);
         
         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~KonectSourceSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         {
            return type_konect_source;
         }

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion();

         ////////////////////////////////////////////////////////////
         // refresh
         ////////////////////////////////////////////////////////////
         virtual void refresh();

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Request http_request_type;
         virtual bool on_failure(http_request_type *request);

         ////////////////////////////////////////////////////////////
         // on_response_complete
         ////////////////////////////////////////////////////////////
         virtual bool on_response_complete(http_request_type *request);

         ////////////////////////////////////////////////////////////
         // get_guid
         //
         // Returns true if found and populates guid.  Returns false if
         // not found and guid is emptied. 
         ////////////////////////////////////////////////////////////
         bool find_guid(StrUni const &key, StrUni &guid);
         void insert_guid(StrUni const &key, StrUni const &guid)
         { guids[key] = guid; }

         ////////////////////////////////////////////////////////////
         // set_guid_properties
         ////////////////////////////////////////////////////////////
         void set_guid_properties(Csi::Xml::Element &prop_xml);

         ////////////////////////////////////////////////////////////
         // get_guid_properties
         ////////////////////////////////////////////////////////////
         void get_guid_properties(Csi::Xml::Element &prop_xml);

      private:
         ////////////////////////////////////////////////////////////
         // expansion_started
         ////////////////////////////////////////////////////////////
         bool expansion_started;

         ////////////////////////////////////////////////////////////
         // http_request
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<http_request_type> http_request;

         ////////////////////////////////////////////////////////////
         // connection
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Connection connection_type;
         typedef Csi::SharedPtr<connection_type> connection_handle;
         connection_handle connection;

         ////////////////////////////////////////////////////////////
         // guids
         //
         // Store by station or station.table keys
         ////////////////////////////////////////////////////////////
         typedef std::map<StrUni, StrUni> guids_type;
         guids_type guids;
      };


      ////////////////////////////////////////////////////////////
      // class KonectStationSymbol
      ////////////////////////////////////////////////////////////
      class KonectStationSymbol:
         public SymbolBase,
         public Csi::HttpClient::RequestClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         KonectStationSymbol(
            KonectSource *source,
            KonectSourceSymbol *parent,
            StrUni const &title,
            StrUni const &guid);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~KonectStationSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         {
            return type_station;
         }

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion();

         ////////////////////////////////////////////////////////////
         // refresh
         ////////////////////////////////////////////////////////////
         virtual void refresh();

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Request http_request_type;
         virtual bool on_failure(http_request_type *request);

         ////////////////////////////////////////////////////////////
         // on_response_complete
         ////////////////////////////////////////////////////////////
         virtual bool on_response_complete(http_request_type *request);

      private:
         ////////////////////////////////////////////////////////////
         // guid
         ////////////////////////////////////////////////////////////
         StrUni guid;

         ////////////////////////////////////////////////////////////
         // expansion_started
         ////////////////////////////////////////////////////////////
         bool expansion_started;

         ////////////////////////////////////////////////////////////
         // http_request
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<http_request_type> http_request;

         ////////////////////////////////////////////////////////////
         // connection
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Connection connection_type;
         typedef Csi::SharedPtr<connection_type> connection_handle;
         connection_handle connection;
      };


      ////////////////////////////////////////////////////////////
      // class KonectTableSymbol
      ////////////////////////////////////////////////////////////
      class KonectTableSymbol:
         public SymbolBase,
         public Csi::HttpClient::RequestClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         KonectTableSymbol(
            KonectSource *source,
            KonectStationSymbol *parent,
            StrUni const &title,
            StrUni const &guid);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~KonectTableSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         {
            return type_table;
         }

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion();

         ////////////////////////////////////////////////////////////
         // refresh
         ////////////////////////////////////////////////////////////
         virtual void refresh();

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Request http_request_type;
         virtual bool on_failure(http_request_type *request);

         ////////////////////////////////////////////////////////////
         // on_response_complete
         ////////////////////////////////////////////////////////////
         virtual bool on_response_complete(http_request_type *request);

      private:
         ////////////////////////////////////////////////////////////
         // guid
         ////////////////////////////////////////////////////////////
         StrUni guid;

         ////////////////////////////////////////////////////////////
         // expansion_started
         ////////////////////////////////////////////////////////////
         bool expansion_started;

         ////////////////////////////////////////////////////////////
         // http_request
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<http_request_type> http_request;

         ////////////////////////////////////////////////////////////
         // connection
         ////////////////////////////////////////////////////////////
         typedef Csi::HttpClient::Connection connection_type;
         typedef Csi::SharedPtr<connection_type> connection_handle;
         connection_handle connection;
      };


      ////////////////////////////////////////////////////////////
      // class KonectFieldSymbol
      ////////////////////////////////////////////////////////////
      class KonectFieldSymbol:
         public SymbolBase
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         KonectFieldSymbol(
            KonectSource *source,
            KonectTableSymbol *parent,
            StrUni const &fieldname,
            StrUni const &fieldtype);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~KonectFieldSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         {
            return type_scalar;
         }

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const
         {
            return true;
         }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         {
            return false;
         }

      private:
         ////////////////////////////////////////////////////////////
         // StrUni field_type
         ////////////////////////////////////////////////////////////
         StrUni field_type;
      };
   }
}

#endif