/* Stream.h

   Copyright (C) 1999, 2005 Campbell Scientific, Inc.
   
   Written by: Jon Trauntvein
   Date Begun: Friday 19 February 1999
   Last Change: Friday 25 March 2005
   Last Commit: $Date: 2008-02-15 16:59:31 -0600 (Fri, 15 Feb 2008) $ (UTC)
   Committed by: $Author: jon $
   
*/

#ifndef Stream_h
#define Stream_h

#include "StrBin.h"
#include "Csi.LgrDate.h"


//@group class forward declarations
class StrAsc;
//@endgroup


////////////////////////////////////////////////////////////
// class Stream
//
// A virtual base class that describes the interface for a message or packet
// object. These are objects that provide storage for a variable number of
// primitive objects including integers, floats, and strings. Classes that
// inherit from this class must overload the following methods which implement
// the storage policies:
//
//  length()    - Returns the total length of the storage buffer
//  whatsLeft() - Returns the number of bytes that have not yet been read
//  readBytes_impl()  - Implements the policy to read bytes from the stream
//  writeBytes_impl() - Implements the policy to write bytes to the stream
////////////////////////////////////////////////////////////
class Stream
{
public:
   ////////////////////////////////////////////////////////////
   // class ReadException
   //////////////////////////////////////////////////////////// 
   class ReadException: public std::exception
   {
   public:
      ReadException()
      { }

      virtual char const *what() const throw ()
      { return "Stream read exception"; }
   };

   ////////////////////////////////////////////////////////////
   // class WriteException
   //////////////////////////////////////////////////////////// 
   class WriteException: public std::exception
   {
   public:
      virtual char const *what() const throw ()
      { return "Stream write exception"; }
   };
   
public:
   ////////////////////////////////////////////////////////////
   // destructor
   //
   // Declared virtual so that the derived class' destructor will work properly
   //////////////////////////////////////////////////////////// 
   virtual ~Stream()
   { }

   //@group Primitive object insertion methods
   // These methods can throw objects of type WriteException
   ////////////////////////////////////////////////////////////
   // addByte
   //////////////////////////////////////////////////////////// 
   void addByte(byte val); 
   
   ////////////////////////////////////////////////////////////
   // addBool
   //////////////////////////////////////////////////////////// 
   void addBool(bool val); 
   
   ///////// addUInt2
   void addUInt2(uint2 val, bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // addInt2
   //////////////////////////////////////////////////////////// 
   void addInt2(int2 val, bool swapOrder = false); 
   
   ////////////////////////////////////////////////////////////
   // adduint4
   //////////////////////////////////////////////////////////// 
   void addUInt4(uint4 val, bool swapOrder = false); 
   
   ////////////////////////////////////////////////////////////
   // addInt4
   //////////////////////////////////////////////////////////// 
   void addInt4(int4 val, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // addInt8
   //////////////////////////////////////////////////////////// 
   void addInt8(int8 val, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // addIeee4
   //////////////////////////////////////////////////////////// 
   void addIeee4(float val, bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // addIeee8
   //////////////////////////////////////////////////////////// 
   void addIeee8(double val, bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // addAsciiZ
   //
   // Adds all characters up to and including the null terminator
   //////////////////////////////////////////////////////////// 
   void addAsciiZ(char const *s);
   
   ////////////////////////////////////////////////////////////
   // addAscii
   //
   // Adds exactly len characters
   //////////////////////////////////////////////////////////// 
   void addAscii(char const *s, uint4 len);
   
   ////////////////////////////////////////////////////////////
   // addBytes
   //////////////////////////////////////////////////////////// 
   void addBytes(void const *buff, uint4 len, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // addBytes (from an open file handle)
   ////////////////////////////////////////////////////////////
   void addBytes(FILE *in, uint4 len);

   ////////////////////////////////////////////////////////////
   // addSec
   ////////////////////////////////////////////////////////////
   void addSec(Csi::LgrDate const &val, bool swap_order);

   ////////////////////////////////////////////////////////////
   // addUSec
   ////////////////////////////////////////////////////////////
   void addUSec(Csi::LgrDate const &val);

   ////////////////////////////////////////////////////////////
   // addNSec
   ////////////////////////////////////////////////////////////
   void addNSec(Csi::LgrDate const &val, bool swap_order); 
   //@endgroup

   //@group Primitive object extraction methods
   ////////////////////////////////////////////////////////////
   // readByte
   //////////////////////////////////////////////////////////// 
   byte readByte();
   
   ////////////////////////////////////////////////////////////
   // readBool
   //////////////////////////////////////////////////////////// 
   bool readBool();
   
   ////////////////////////////////////////////////////////////
   // readUInt2
   //////////////////////////////////////////////////////////// 
   uint2 readUInt2(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readInt2
   //////////////////////////////////////////////////////////// 
   int2 readInt2(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readuint4
   //////////////////////////////////////////////////////////// 
   uint4 readUInt4(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readInt4
   //////////////////////////////////////////////////////////// 
   int4 readInt4(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readIeee4
   //////////////////////////////////////////////////////////// 
   float readIeee4(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readIeee8
   //////////////////////////////////////////////////////////// 
   double readIeee8(bool swapOrder = false);
   
   ////////////////////////////////////////////////////////////
   // readAsciiZ
   //
   // Reads the characters in the stream into the supplied buffer until the
   // specified length is full or a null terminator is located. If the
   // specified buffer is filled up, the stream pointer will be advanced past
   // the position of the terminator anyway. If the null terminator is not
   // found before the end of the stream, a ReadException object will be
   // thrown.
   //////////////////////////////////////////////////////////// 
   void readAsciiZ(char *buff, uint4 maxLen);

   ////////////////////////////////////////////////////////////
   // readAsciiZ (no length limit)
   //
   // Does the same as the previous declaration only it will read everything
   // into the buffer.
   ////////////////////////////////////////////////////////////
   void readAsciiZ(StrAsc &buff);

   ////////////////////////////////////////////////////////////
   // readAscii
   //
   // reads exactly length bytes into the buffer specified.
   //////////////////////////////////////////////////////////// 
   void readAscii(char *buff, uint4 len);

   ////////////////////////////////////////////////////////////
   // readBytes
   //
   // reads exactly len bytes into the buffer
   //////////////////////////////////////////////////////////// 
   void readBytes(void *buff, uint4 len, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // readBytes
   //
   // reads exactly len bytes into the StrBin
   //////////////////////////////////////////////////////////// 
   void readBytes(StrBin &buff, uint4 len, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // readBytes
   //
   // Reads exactly len bytes from this packet and appends them at the end of
   // the destination packet
   //////////////////////////////////////////////////////////// 
   void readBytes(Stream &buff, uint4 len);

   ////////////////////////////////////////////////////////////
   // readArray
   //
   // Reads an array of objects while conditionally swapping the order of array
   // elements
   //////////////////////////////////////////////////////////// 
   void readArray(void *buff, uint4 objLen, uint4 cnt, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // readSec
   ////////////////////////////////////////////////////////////
   Csi::LgrDate readSec(bool swap_order = false);

   ////////////////////////////////////////////////////////////
   // readUSec
   ////////////////////////////////////////////////////////////
   Csi::LgrDate readUSec();

   ////////////////////////////////////////////////////////////
   // readNSec
   ////////////////////////////////////////////////////////////
   Csi::LgrDate readNSec(bool swap_order = false);
   //@endgroup

   ////////////////////////////////////////////////////////////
   // length
   //
   // Reports the length of the stream
   //////////////////////////////////////////////////////////// 
   virtual uint4 length() const = 0;

   ////////////////////////////////////////////////////////////
   // whatsLeft
   //
   // Reports the number of bytes that are available to be read
   //////////////////////////////////////////////////////////// 
   virtual uint4 whatsLeft() const = 0;

protected:
   ////////////////////////////////////////////////////////////
   // reverse
   //
   // Implements the algorithm for reversing a buffer
   //////////////////////////////////////////////////////////// 
   static void reverse(void *buff, uint4 len);

   ////////////////////////////////////////////////////////////
   // readBytes_impl
   //
   // Should be overloaded by the derived class to read the specified bytes
   // from the stream source
   //////////////////////////////////////////////////////////// 
   virtual void readBytes_impl(void *dest, uint4 len, bool swapOrder) = 0;

   ////////////////////////////////////////////////////////////
   // addBytes_impl
   //
   // Should be overloaded by the derived class to write the specified bytes to
   // the stream source
   //////////////////////////////////////////////////////////// 
   virtual void addBytes_impl(void const *src, uint4 len, bool swapOrder) = 0;
};

#endif
