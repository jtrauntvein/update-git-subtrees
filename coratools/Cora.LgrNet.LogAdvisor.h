/* Cora.LgrNet.LogAdvisor.h

   Copyright (C) 2001, 2009 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Monday 17 December 2001
   Last Change: Friday 23 October 2009
   Last Commit: $Date: 2020-02-10 10:53:20 -0600 (Mon, 10 Feb 2020) $ 
   Committed by: $author:$

*/

#ifndef Cora_LgrNet_LogAdvisor_h
#define Cora_LgrNet_LogAdvisor_h
#include "Cora.ClientBase.h"
#include "Csi.InstanceValidator.h"
#include "Csi.Events.h"
#include "LgrDate.h"
#include <list>


namespace Cora
{
   namespace LgrNet
   {
      //@group class forward declarations
      class LogAdvisor;
      //@endgroup

      
      ////////////////////////////////////////////////////////////
      // class LogAdvisorClient
      ////////////////////////////////////////////////////////////
      class LogAdvisorClient: public Csi::InstanceValidator
      {
      public:
         ////////////////////////////////////////////////////////////
         // on_started
         ////////////////////////////////////////////////////////////
         virtual void on_started(
            LogAdvisor *advisor)
         { }

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         enum failure_type
         {
            failure_unknown = 0,
            failure_session_failed = 1,
            failure_invalid_logon = 2,
            failure_server_security_blocked = 3,
            failure_unsupported_transaction = 4,
            failure_invalid_log_id = 5,
            failure_server_cancelled = 6
         };
         virtual void on_failure(
            LogAdvisor *advisor,
            failure_type failure) = 0;

         ////////////////////////////////////////////////////////////
         // on_log_message
         //
         // This method is invoked when a log message has become available from the component. The
         // component will not post this event again until the application has invoked its
         // next_record() or next_batch() methods.
         ////////////////////////////////////////////////////////////
         virtual void on_log_message(
            LogAdvisor *advisor,
            LgrDate const &stamp,
            StrAsc const &record_data)
         { }
      };

      
      ////////////////////////////////////////////////////////////
      // LogAdvisor
      ////////////////////////////////////////////////////////////
      class LogAdvisor:
         public ClientBase,
         public Csi::EventReceiver
      {
      public:
         ////////////////////////////////////////////////////////////
         // enum log_id_type
         ////////////////////////////////////////////////////////////
         enum log_id_type
         {
            log_transaction = 1,
            log_comms_status = 2,
            log_object_state = 3
         };

      private:
         //@group properties
         ////////////////////////////////////////////////////////////
         // log_id
         ////////////////////////////////////////////////////////////
         log_id_type log_id;

         ////////////////////////////////////////////////////////////
         // records_per_batch
         ////////////////////////////////////////////////////////////
         uint4 records_per_batch;

         ////////////////////////////////////////////////////////////
         // back_up_count
         ////////////////////////////////////////////////////////////
         uint4 back_up_count;
         //@endgroup

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         LogAdvisor();

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~LogAdvisor();

         //@group properties access
         ////////////////////////////////////////////////////////////
         // set_log_id
         ////////////////////////////////////////////////////////////
         void set_log_id(log_id_type log_id_);

         ////////////////////////////////////////////////////////////
         // get_log_id
         ////////////////////////////////////////////////////////////
         log_id_type get_log_id() const { return log_id; }

         ////////////////////////////////////////////////////////////
         // set_records_per_batch
         ////////////////////////////////////////////////////////////
         void set_records_per_batch(uint4 records_per_batch_);

         ////////////////////////////////////////////////////////////
         // get_records_per_batch
         ////////////////////////////////////////////////////////////
         uint4 get_records_per_batch() const { return records_per_batch; }

         ////////////////////////////////////////////////////////////
         // set_back_up_count
         ////////////////////////////////////////////////////////////
         void set_back_up_count(uint4 back_up_count_);

         ////////////////////////////////////////////////////////////
         // get_back_up_count
         ////////////////////////////////////////////////////////////
         uint4 get_back_up_count() const { return back_up_count; } 
         //@endgroup

         ////////////////////////////////////////////////////////////
         // start
         //
         // Responsible for starting the advise transaction with the server.  This method is
         // supplied in two versions:  one uses the settings and default net session from another
         // component that should have already been started.  The other uses a newly initialised
         // router
         ////////////////////////////////////////////////////////////
         typedef LogAdvisorClient client_type;
         void start(
            client_type *client_,
            ClientBase *other_component);
         void start(
            client_type *client_,
            router_handle &router);

         ////////////////////////////////////////////////////////////
         // format_failure
         ////////////////////////////////////////////////////////////
         static void format_failure(std::ostream &out, client_type::failure_type failure);
         
         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         void finish();

         ////////////////////////////////////////////////////////////
         // next_record
         //
         // Advances the log advise cursor to get the next record.  This method should only be called
         // once for each time that the client received the on_log_message() notification. 
         ////////////////////////////////////////////////////////////
         void next_record();

         //@group batch access
         ////////////////////////////////////////////////////////////
         // next_batch
         //
         // Advances the log advise cursor and clears the local cache.  This method should only be
         // called once for each time that the client receives the on_log_message() notification.
         // Use of this method should not be mixed with the next_record() notification. 
         ////////////////////////////////////////////////////////////
         void next_batch();

         ////////////////////////////////////////////////////////////
         // log_record_type
         ////////////////////////////////////////////////////////////
         class log_record_type
         {
         public:
            ////////////////////////////////////////////////////////////
            // stamp
            ////////////////////////////////////////////////////////////
            LgrDate stamp;

            ////////////////////////////////////////////////////////////
            // data
            ////////////////////////////////////////////////////////////
            StrAsc data;

            ////////////////////////////////////////////////////////////
            // default constructor
            ////////////////////////////////////////////////////////////
            log_record_type()
            { }

            ////////////////////////////////////////////////////////////
            // copy constructor
            ////////////////////////////////////////////////////////////
            log_record_type(log_record_type const &other):
               stamp(other.stamp),
               data(other.data)
            { } 
         };

         ////////////////////////////////////////////////////////////
         // unread_begin
         //////////////////////////////////////////////////////////// 
         typedef Csi::SharedPtr<log_record_type> log_record_handle;
         typedef std::list<log_record_handle> unread_records_type;
         typedef unread_records_type::iterator iterator;
         iterator unread_begin() { return unread_records.begin(); }

         ////////////////////////////////////////////////////////////
         // unread_end
         ////////////////////////////////////////////////////////////
         iterator unread_end() { return unread_records.end(); }

         ////////////////////////////////////////////////////////////
         // unread_size
         ////////////////////////////////////////////////////////////
         size_t unread_size() const { return unread_records.size(); }

         ////////////////////////////////////////////////////////////
         // unread_front
         ////////////////////////////////////////////////////////////
         log_record_handle const &unread_front() const
         { return unread_records.front(); }
         //@endgroup

      protected:
         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &ev);

         ////////////////////////////////////////////////////////////
         // onNetMessage
         ////////////////////////////////////////////////////////////
         virtual void onNetMessage(
            Csi::Messaging::Router *rtr,
            Csi::Messaging::Message *msg);

         ////////////////////////////////////////////////////////////
         // on_corabase_ready
         ////////////////////////////////////////////////////////////
         virtual void on_corabase_ready();

         ////////////////////////////////////////////////////////////
         // on_corabase_failure
         ////////////////////////////////////////////////////////////
         virtual void on_corabase_failure(corabase_failure_type failure);

         ////////////////////////////////////////////////////////////
         // on_corabase_session_failure
         ////////////////////////////////////////////////////////////
         virtual void on_corabase_session_failure();

      private:
         ////////////////////////////////////////////////////////////
         // on_log_advise_not
         ////////////////////////////////////////////////////////////
         void on_log_advise_not(Csi::Messaging::Message *message);

         ////////////////////////////////////////////////////////////
         // start_get_next_batch
         ////////////////////////////////////////////////////////////
         void start_get_next_batch();
         
      private:
         ////////////////////////////////////////////////////////////
         // client
         ////////////////////////////////////////////////////////////
         client_type *client;

         ////////////////////////////////////////////////////////////
         // state
         ////////////////////////////////////////////////////////////
         enum state_type
         {
            state_standby,
            state_delegate,
            state_wait_for_server,
            state_wait_for_client
         } state;

         ////////////////////////////////////////////////////////////
         // unread_records
         //
         // The list of records that have not been read by the client yet.
         ////////////////////////////////////////////////////////////
         unread_records_type unread_records;

         ////////////////////////////////////////////////////////////
         // cached_records
         //
         // The list of records that have been read an can be used to read the next time we get the
         // data advise from the server.
         ////////////////////////////////////////////////////////////
         unread_records_type cached_records;

         ////////////////////////////////////////////////////////////
         // advise_tran
         ////////////////////////////////////////////////////////////
         uint4 advise_tran;
      };
   };
};


#endif
