/* Packet.h

   Copyright (C) 1998, 2006 Campbell Scientific, Inc.
   
   Written by: Jon Trauntvein
   Date Begun: Tuesday 18 August 1998
   Last Change: Tuesday 11 April 2006
   Last Commit: $Date: 2007-02-01 14:58:26 -0600 (Thu, 01 Feb 2007) $ (UTC)
   Committed by: $Author: tmecham $
   
*/

#ifndef Packet_h
#define Packet_h


#include "Stream.h"
#include "Csi.SharedPtr.h"
#include "StrUni.h"
#include "StrAsc.h"
#include "StrBin.h"


////////////////////////////////////////////////////////////
// class Packet
//
// Provides a mechanism whereby common program variable types can be streamed to or from an
// expandable block of binary data. Byte ordering translation is provided as a selectable
// feature.
////////////////////////////////////////////////////////////
class Packet: public Stream
{
public:
   ////////////////////////////////////////////////////////////
   // constructor
   ////////////////////////////////////////////////////////////
   Packet(uint4 headerLen_);

   ////////////////////////////////////////////////////////////
   // copy constructor
   ////////////////////////////////////////////////////////////
   Packet(Packet const &other, uint4 headerLen_ = 0, bool deep_copy = false);

   ////////////////////////////////////////////////////////////
   // data constructor
   //
   // Constructs the packet with the specified content. If copy is set to true, the invoking code is
   // responsible for maintaining the validity of the storage for the entire life of this object
   ////////////////////////////////////////////////////////////
   Packet(void const *buff, uint4 len, uint4 headerLen_, bool copy = true);

   ////////////////////////////////////////////////////////////
   // reservation constructor
   //
   // Constructs the message with a reserved number of bytes
   ////////////////////////////////////////////////////////////
   Packet(uint4 reserveLen, uint4 headerLen_);

   ////////////////////////////////////////////////////////////
   // copy operator
   ////////////////////////////////////////////////////////////
   Packet &operator =(Packet const &other);

   ////////////////////////////////////////////////////////////
   // destructor
   ////////////////////////////////////////////////////////////
   virtual ~Packet();

   
   //@group Primitive object replacement methods
   // These methods replace content anywhere in the message including the header area
   ////////////////////////////////////////////////////////////
   // replaceByte
   ////////////////////////////////////////////////////////////
   void replaceByte(byte val, uint4 offset);

   ////////////////////////////////////////////////////////////
   // replaceBool
   ////////////////////////////////////////////////////////////
   void replaceBool(bool val, uint4 offset);

   ////////////////////////////////////////////////////////////
   // replaceUInt2
   ////////////////////////////////////////////////////////////
   void replaceUInt2(uint2 val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceInt2
   ////////////////////////////////////////////////////////////
   void replaceInt2(int2 val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceUInt4
   ////////////////////////////////////////////////////////////
   void replaceUInt4(uint4 val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceInt4
   ////////////////////////////////////////////////////////////
   void replaceInt4(int4 val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceIeee4
   ////////////////////////////////////////////////////////////
   void replaceIeee4(float val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceIeee8
   ////////////////////////////////////////////////////////////
   void replaceIeee8(double val, uint4 offset, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // replaceBytes
   ////////////////////////////////////////////////////////////
   void replaceBytes(void const *buff, uint4 len, uint4 offset, bool swapOrder = false);
   //@endgroup


   //@group Miscellaneous access methods
   ////////////////////////////////////////////////////////////
   // getMsg
   //
   // Returns a pointer to the beginning of the message buffer
   ////////////////////////////////////////////////////////////
   char const *getMsg() const
   { return (char const *)msg->get(); }

   ////////////////////////////////////////////////////////////
   // length
   //
   // Returns the length of the message
   ////////////////////////////////////////////////////////////
   virtual uint4 length() const
   { return msg->length(); }

   ////////////////////////////////////////////////////////////
   // getReadIdx
   //
   // Returns the current value of the read index
   ////////////////////////////////////////////////////////////
   uint4 getReadIdx()
   { return readIdx; }

   ////////////////////////////////////////////////////////////
   // reset
   //
   // Resets the message read index back to the beginning of the message
   ////////////////////////////////////////////////////////////
   void reset()
   { readIdx = headerLen; }

   ////////////////////////////////////////////////////////////
   // movePast
   //
   // Moves the read pointer for the specified number of bytes from its current position. Will throw
   // a ReadException if the specified offset will move the read index beyond the packet contents
   ////////////////////////////////////////////////////////////
   void movePast(uint4 len)
   {
      if(readIdx + len <= msg->length())
         readIdx += len;
      else
         throw ReadException();
   }

   ////////////////////////////////////////////////////////////
   // objAtReadIdx
   //
   // Returns a pointer to the object at the read index
   ////////////////////////////////////////////////////////////
   void const *objAtReadIdx()
   { return getMsg() + readIdx; }

   ////////////////////////////////////////////////////////////
   // whatsLeft
   //
   // Returns the number of bytes that are available to be read between the read index and the end
   // of the message
   ////////////////////////////////////////////////////////////
   virtual uint4 whatsLeft() const
   { return msg->length() - readIdx; }

   ////////////////////////////////////////////////////////////
   // clear
   //
   // Clears the message body of any data that may have been written. Leaves the message header
   // untouched 
   ////////////////////////////////////////////////////////////
   void clear()
   {
      msg->cut(headerLen);
      reset();
   }
   //@endgroup

   ////////////////////////////////////////////////////////////
   // get_headerLen
   ////////////////////////////////////////////////////////////
   uint4 get_headerLen() const
   { return headerLen; }

   ////////////////////////////////////////////////////////////
   // set_headerLen
   //
   // Sets the headerLen field of the message to the specified value and resets the read index.
   ////////////////////////////////////////////////////////////
   void set_headerLen(uint4 headerLen_)
   {
      if(headerLen_ > msg->length())
         throw ReadException();
      headerLen = headerLen_;
      reset();
   }

   ////////////////////////////////////////////////////////////
   // reserve
   //
   // Called by high level code to help pre-reserve space in the message buffer
   // so that subsequent adds do not result in heap allocations.  
   ////////////////////////////////////////////////////////////
   void reserve(uint4 reserve_len)
   { msg->reserve(length() + reserve_len); }
      

protected:
   ////////////////////////////////////////////////////////////
   // addBytes_impl
   ////////////////////////////////////////////////////////////
   virtual void addBytes_impl(void const *buff, uint4 len, bool swapOrder = false);

   ////////////////////////////////////////////////////////////
   // readBytes_impl
   //
   // reads exactly len bytes into the buffer
   ////////////////////////////////////////////////////////////
   virtual void readBytes_impl(void *buff, uint4 len, bool swapOrder = false);
      
protected:
   ////////////////////////////////////////////////////////////
   // class IMessage
   //
   // Declares an interface for managing a stream of bytes
   ////////////////////////////////////////////////////////////
   class IMessage
   {
   public:
      ////////////////////////////////////////////////////////////
      // destructor
      ////////////////////////////////////////////////////////////
      virtual ~IMessage()
      { }

      ////////////////////////////////////////////////////////////
      // read
      //
      // Reads bytes from the stream starting at the specified offset and running for the specified
      // length. 
      ////////////////////////////////////////////////////////////
      virtual void read(void *buff, uint4 len, uint4 offset, bool swapOrder = false)
      { throw ReadException(); }

      ////////////////////////////////////////////////////////////
      // write
      //
      // Appends bytes to the stream running for the specified length
      ////////////////////////////////////////////////////////////
      virtual void write(void const *buff, uint4 len, bool swapOrder = false)
      { throw WriteException(); }

      ////////////////////////////////////////////////////////////
      // replace
      //
      // Replaces the bytes at the specified position and running for the specified length. There
      // must have already been bytes written in the specified area otherwise a WriteException
      // object will be thrown
      ////////////////////////////////////////////////////////////
      virtual void replace(void const *buff, uint4 len, uint4 offset, bool swapOrder = false)
      { throw WriteException(); }

      ////////////////////////////////////////////////////////////
      // init
      //
      // Initialises the stream with the specified number of null bytes
      ////////////////////////////////////////////////////////////
      virtual void init(uint4 len)
      { throw WriteException(); }

      ////////////////////////////////////////////////////////////
      // length
      //
      // Returns the number of bytes stored in the stream
      ////////////////////////////////////////////////////////////
      virtual uint4 length() const = 0;

      ////////////////////////////////////////////////////////////
      // get
      //
      // Returns a pointer to the beginning of the stream storage
      ////////////////////////////////////////////////////////////
      virtual void const *get() const = 0;

      ////////////////////////////////////////////////////////////
      // cut
      //
      // Removes any data from the stream from the specified position onwards
      ////////////////////////////////////////////////////////////
      virtual void cut(uint4 pos)
      { throw WriteException(); }

      ////////////////////////////////////////////////////////////
      // reserve
      ////////////////////////////////////////////////////////////
      virtual void reserve(uint4 reserve_len)
      { }
   };

protected:
   ////////////////////////////////////////////////////////////
   // headerLen
   //
   // Stores the area of the packet buffer that is reserved for the packet header. Normal read
   // operations do not enter this area.
   ////////////////////////////////////////////////////////////
   uint4 headerLen;

   ////////////////////////////////////////////////////////////
   // readIdx
   //
   // The current read position in the message
   ////////////////////////////////////////////////////////////
   uint4 readIdx;

   ////////////////////////////////////////////////////////////
   // msg
   ////////////////////////////////////////////////////////////
   Csi::SharedPtr<IMessage> msg;

private:
   ////////////////////////////////////////////////////////////
   // class OwnerStream
   //
   // Declares a class for readable or writable stream objects that manage their own storage
   ////////////////////////////////////////////////////////////
   class OwnerStream: public IMessage
   {
   public:
      ////////////////////////////////////////////////////////////
      // default constructor
      ////////////////////////////////////////////////////////////
      OwnerStream();

      ////////////////////////////////////////////////////////////
      // reservation constructor
      ////////////////////////////////////////////////////////////
      OwnerStream(uint4 reserveLen);

      ////////////////////////////////////////////////////////////
      // initialising constructor
      ////////////////////////////////////////////////////////////
      OwnerStream(void const *buff, uint4 len);

      ////////////////////////////////////////////////////////////
      // read
      ////////////////////////////////////////////////////////////
      virtual void read(void *buff, uint4 len, uint4 offset, bool swapOrder = false);

      ////////////////////////////////////////////////////////////
      // write
      ////////////////////////////////////////////////////////////
      virtual void write(void const *buff, uint4 len, bool swapOrder = false);

      ////////////////////////////////////////////////////////////
      // replace
      ////////////////////////////////////////////////////////////
      virtual void replace(void const *buff, uint4 len, uint4 offset, bool swapOrder = false);

      ////////////////////////////////////////////////////////////
      // init
      ////////////////////////////////////////////////////////////
      virtual void init(uint4 len);

      ////////////////////////////////////////////////////////////
      // length
      ////////////////////////////////////////////////////////////
      virtual uint4 length() const;

      ////////////////////////////////////////////////////////////
      // get
      ////////////////////////////////////////////////////////////
      virtual void const *get() const;

      ////////////////////////////////////////////////////////////
      // cut
      ////////////////////////////////////////////////////////////
      virtual void cut(uint4 pos)
      { src.cut(pos); }

      ////////////////////////////////////////////////////////////
      // reserve
      ////////////////////////////////////////////////////////////
      virtual void reserve(uint4 reserve_len)
      { src.reserve(reserve_len); }

   private:
      ////////////////////////////////////////////////////////////
      // buff
      ////////////////////////////////////////////////////////////
      StrBin src;
   };

   ////////////////////////////////////////////////////////////
   // class RenterStream
   //
   // Declares a class for readable stream objects that "rent" their storage. The invoking code is
   // responsible for maintaining the validity of the pointer passed to the constructor.
   ////////////////////////////////////////////////////////////
   class RenterStream: public IMessage
   {
   public:
      ////////////////////////////////////////////////////////////
      // constructor
      ////////////////////////////////////////////////////////////
      RenterStream(void const *buff_, uint4 len_);

      ////////////////////////////////////////////////////////////
      // destructor
      ////////////////////////////////////////////////////////////
      virtual ~RenterStream();
      
      ////////////////////////////////////////////////////////////
      // read
      ////////////////////////////////////////////////////////////
      virtual void read(void *buff, uint4 len, uint4 offset, bool swapOrder = false);

      ////////////////////////////////////////////////////////////
      // length
      ////////////////////////////////////////////////////////////
      virtual uint4 length() const;

      ////////////////////////////////////////////////////////////
      // get
      ////////////////////////////////////////////////////////////
      virtual void const *get() const;

      ////////////////////////////////////////////////////////////
      // cut
      ////////////////////////////////////////////////////////////
      virtual void cut(uint4 pos);

   private:
      ////////////////////////////////////////////////////////////
      // rentedBuff
      ////////////////////////////////////////////////////////////
      byte const *rentedBuff;

      ////////////////////////////////////////////////////////////
      // rentedBuffLen
      ////////////////////////////////////////////////////////////
      uint4 rentedBuffLen;
   };
};

#endif
