/* Csi.DevConfig.ConfigSummary.h

   Copyright (C) 2004, 2014 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Friday 26 March 2004
   Last Change: Thursday 13 February 2014
   Last Commit: $Date: 2017-06-21 09:20:42 -0600 (Wed, 21 Jun 2017) $ 
   Last Changed by: $Author: jon $

*/

#ifndef Csi_DevConfig_ConfigSummary_h
#define Csi_DevConfig_ConfigSummary_h

#include "Csi.DevConfig.SettingsManager.h"
#include "Csi.Html.Document.h"
#include "Csi.LgrDate.h"
#include "Csi.Xml.Element.h"


namespace Csi
{
   namespace DevConfig
   {
      ////////////////////////////////////////////////////////////
      // class ConfigSummary
      //
      // This class provides persistence and reporting of a device's
      // configuration. 
      ////////////////////////////////////////////////////////////
      class ConfigSummary
      {
      public:
         ////////////////////////////////////////////////////////////
         // copy constructor (manager)
         ////////////////////////////////////////////////////////////
         ConfigSummary(
            SettingsManager &manager,
            bool after_commit = false);

         ////////////////////////////////////////////////////////////
         // copy constructor (XML element)
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<LibraryManager> library_handle;
         ConfigSummary(
            Xml::Element &xml_data,
            library_handle &library_);

         ////////////////////////////////////////////////////////////
         // string constructor
         ////////////////////////////////////////////////////////////
         ConfigSummary(
            char const *xml_file_name,
            library_handle &library);

         ////////////////////////////////////////////////////////////
         // empty summary constructor
         //
         // constructs a new summary object using the specified device type and major version. 
         ////////////////////////////////////////////////////////////
         ConfigSummary(
            library_handle &library_,
            uint2 device_type,
            byte major_version);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~ConfigSummary();

         ////////////////////////////////////////////////////////////
         // update_manager
         //
         // Updates the settings in the manager after checking the model
         // number and versions numbers.  Will throw an exception if the update
         // fails. 
         ////////////////////////////////////////////////////////////
         void update_manager(SettingsManager &manager, bool throw_on_error = false);

         ////////////////////////////////////////////////////////////
         // update_xml (to node)
         ////////////////////////////////////////////////////////////
         void update_xml(Xml::Element &xml_data);

         ////////////////////////////////////////////////////////////
         // update_xml (to file)
         ////////////////////////////////////////////////////////////
         void update_xml(char const *xml_file_name);
         
         ////////////////////////////////////////////////////////////
         // report_html
         ////////////////////////////////////////////////////////////
         void report_html(Csi::Html::Document &document);

         ////////////////////////////////////////////////////////////
         // get_device_type
         ////////////////////////////////////////////////////////////
         uint2 get_device_type() const
         { return device_type; }
         
         ////////////////////////////////////////////////////////////
         // get_model_no
         ////////////////////////////////////////////////////////////
         StrAsc const &get_model_no() const
         { return model_no; }

         ////////////////////////////////////////////////////////////
         // get_present_model_no
         ////////////////////////////////////////////////////////////
         StrAsc const &get_present_model_no() const
         { return present_model_no; }

         ////////////////////////////////////////////////////////////
         // get_major_version
         ////////////////////////////////////////////////////////////
         byte get_major_version() const
         { return major_version; }

         ////////////////////////////////////////////////////////////
         // set_major_version
         ////////////////////////////////////////////////////////////
         void set_major_version(byte major_version_)
         { major_version = major_version_; }

         ////////////////////////////////////////////////////////////
         // get_minor_version
         ////////////////////////////////////////////////////////////
         byte get_minor_version() const
         { return minor_version; }

         ////////////////////////////////////////////////////////////
         // set_minor_version
         ////////////////////////////////////////////////////////////
         void set_minor_version(byte minor_version_)
         { minor_version = minor_version_; }

         ////////////////////////////////////////////////////////////
         // get_serial_no
         ////////////////////////////////////////////////////////////
         StrAsc const &get_serial_no() const
         { return serial_no; }

         ////////////////////////////////////////////////////////////
         // get_timestamp
         ////////////////////////////////////////////////////////////
         LgrDate const &get_timestamp() const
         { return timestamp; }

         //@group methods that allow this object to act as a settings container
         ////////////////////////////////////////////////////////////
         // begin
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<Setting> value_type;
         typedef std::list<value_type> settings_type;
         typedef settings_type::iterator iterator;
         iterator begin()
         { return settings.begin(); }

         ////////////////////////////////////////////////////////////
         // end
         ////////////////////////////////////////////////////////////
         iterator end()
         { return settings.end(); }

         ////////////////////////////////////////////////////////////
         // empty
         ////////////////////////////////////////////////////////////
         bool empty() const
         { return settings.empty(); }

         ////////////////////////////////////////////////////////////
         // clear
         ////////////////////////////////////////////////////////////
         void clear()
         { settings.clear(); }

         ////////////////////////////////////////////////////////////
         // push_back
         ////////////////////////////////////////////////////////////
         void push_back(value_type &setting)
         {
            setting->set_version(major_version, minor_version);
            settings.push_back(setting);
         }

         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_library
         ////////////////////////////////////////////////////////////
         library_handle &get_library()
         { return library; }

         ////////////////////////////////////////////////////////////
         // get_device_desc
         ////////////////////////////////////////////////////////////
         SharedPtr<DeviceDesc> &get_device_desc()
         { return device_desc; }
         
         ////////////////////////////////////////////////////////////
         // get_catalog
         ////////////////////////////////////////////////////////////
         SharedPtr<SettingCatalog> &get_catalog()
         { return catalog; }

         ////////////////////////////////////////////////////////////
         // add_setting
         //
         // Attempts to locate the setting with the specified identifier and
         // returns it or, if not found, creates the setting with the specified
         // identifier and returns that newly created setting.  If the setting
         // cannot be created (the identifier is not given in the setting
         // catalog), a std::invalid_argument exception will be thrown. 
         ////////////////////////////////////////////////////////////
         value_type add_setting(uint2 id);

         ////////////////////////////////////////////////////////////
         // get_load_errors
         //
         // Returns a container of strings that specifies any errors that
         // occurred while the summary was being read.
         ////////////////////////////////////////////////////////////
         typedef std::list<StrAsc> errors_type;
         errors_type const &get_load_errors() const
         { return load_errors; }

         ////////////////////////////////////////////////////////////
         // on_commit_complete
         ////////////////////////////////////////////////////////////
         void on_commit_complete(SettingsManager &manager);
         
      private:
         ////////////////////////////////////////////////////////////
         // read_xml_data
         ////////////////////////////////////////////////////////////
         void read_xml_data(Xml::Element &xml_data);
         
      private:
         ////////////////////////////////////////////////////////////
         // device_type
         ////////////////////////////////////////////////////////////
         uint2 device_type;
         
         ////////////////////////////////////////////////////////////
         // model_no
         ////////////////////////////////////////////////////////////
         StrAsc model_no;

         ////////////////////////////////////////////////////////////
         // present_model_no
         ////////////////////////////////////////////////////////////
         StrAsc present_model_no;

         ////////////////////////////////////////////////////////////
         // major_version
         ////////////////////////////////////////////////////////////
         byte major_version;

         ////////////////////////////////////////////////////////////
         // minor_version
         ////////////////////////////////////////////////////////////
         byte minor_version;

         ////////////////////////////////////////////////////////////
         // timestamp
         //////////////////////////////////////////////////////////// 
         LgrDate timestamp;

         ////////////////////////////////////////////////////////////
         // serial_no
         ////////////////////////////////////////////////////////////
         StrAsc serial_no;

         ////////////////////////////////////////////////////////////
         // library
         ////////////////////////////////////////////////////////////
         library_handle library;

         ////////////////////////////////////////////////////////////
         // settings
         ////////////////////////////////////////////////////////////
         settings_type settings;

         ////////////////////////////////////////////////////////////
         // device_desc
         ////////////////////////////////////////////////////////////
         SharedPtr<DeviceDesc> device_desc;
         
         ////////////////////////////////////////////////////////////
         // catalog
         //
         // Specifies the catalog used for this summary.
         ////////////////////////////////////////////////////////////
         SharedPtr<SettingCatalog> catalog;

         ////////////////////////////////////////////////////////////
         // load_errors
         ////////////////////////////////////////////////////////////
         errors_type load_errors;
      };
   };
};


#endif
