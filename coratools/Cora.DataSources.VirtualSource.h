/* Cora.DataSources.VirtualSource.h

   Copyright (C) 2011, 2014 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Tuesday 06 September 2011
   Last Change: Monday 21 July 2014
   Last Commit: $Date: 2014-07-21 12:09:34 -0600 (Mon, 21 Jul 2014) $
   Last Changed by: $Author: jon $

*/

#ifndef Cora_DataSources_VirtualSource_h
#define Cora_DataSources_VirtualSource_h

#include "Cora.DataSources.SourceBase.h"
#include "Cora.DataSources.SinkBase.h"
#include "Csi.Expression.TokenTypes.h"
#include "Csi.Expression.TokenFactory.h"
#include "Scheduler.h"


namespace Cora
{
   namespace DataSources
   {
      class VirtualSource;
      namespace VirtualSourceHelpers
      {
         ////////////////////////////////////////////////////////////
         // class field_type
         ////////////////////////////////////////////////////////////
         class field_type
         {
         public:
            ////////////////////////////////////////////////////////////
            // constructor
            ////////////////////////////////////////////////////////////
            field_type(
               VirtualSource *source_,
               StrUni const &name_,
               StrUni const &expression_);

            ////////////////////////////////////////////////////////////
            // destructor
            ////////////////////////////////////////////////////////////
            virtual ~field_type();

            ////////////////////////////////////////////////////////////
            // get_name
            ////////////////////////////////////////////////////////////
            StrUni const &get_name() const
            { return name; }

            ////////////////////////////////////////////////////////////
            // get_expression_str
            ////////////////////////////////////////////////////////////
            StrUni const &get_expression_str() const
            { return expression_str; }

            ////////////////////////////////////////////////////////////
            // get_value
            ////////////////////////////////////////////////////////////
            typedef Csi::LightPolySharedPtr<Csi::Expression::Token, Csi::Expression::Operand> value_handle;
            value_handle const &get_value() const
            { return value; }

            ////////////////////////////////////////////////////////////
            // update
            ////////////////////////////////////////////////////////////
            void update(Broker::Record &record);

            ////////////////////////////////////////////////////////////
            // describe
            ////////////////////////////////////////////////////////////
            void describe(Broker::RecordDesc &record_desc);

            ////////////////////////////////////////////////////////////
            // get_data_type
            ////////////////////////////////////////////////////////////
            CsiDbTypeCode get_data_type() const;

            ////////////////////////////////////////////////////////////
            // set_value
            ////////////////////////////////////////////////////////////
            SinkBase::set_outcome_type set_value(ValueSetter const &value);
            
         private:
            ////////////////////////////////////////////////////////////
            // source
            ////////////////////////////////////////////////////////////
            VirtualSource *source;

            ////////////////////////////////////////////////////////////
            // name
            ////////////////////////////////////////////////////////////
            StrUni const name;

            ////////////////////////////////////////////////////////////
            // expression
            ////////////////////////////////////////////////////////////
            StrUni const expression_str;

            ////////////////////////////////////////////////////////////
            // value
            //////////////////////////////////////////////////////////// 
            value_handle value;

            ////////////////////////////////////////////////////////////
            // record_value
            ////////////////////////////////////////////////////////////
            Broker::Record::value_type record_value;
         };
      };

      
      ////////////////////////////////////////////////////////////
      // class VirtualSource
      //
      // Defines a data source object that maintains a "virtual table".  This
      // table contains a collection of fields that, in turn, are derived from
      // constants and expressions from other data sources.  
      ////////////////////////////////////////////////////////////
      class VirtualSource:
         public SourceBase,
         public SchedulerClient,
         public Csi::EventReceiver
      {
      public:
         // @group: names used in properties

         static StrUni const refresh_interval_name;
         static StrUni const refresh_base_name;
         static StrUni const fields_name;
         static StrUni const field_name;
         static StrUni const field_name_name;
         static StrUni const field_value_name;
         
         // @endgroup

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         VirtualSource(
            StrUni const &name,
            StrAsc const &constants_dir_,
            StrAsc const &constants_prefix_);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~VirtualSource();

         ////////////////////////////////////////////////////////////
         // connect
         ////////////////////////////////////////////////////////////
         virtual void connect();

         ////////////////////////////////////////////////////////////
         // disconnect
         ////////////////////////////////////////////////////////////
         virtual void disconnect();

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // get_properties
         ////////////////////////////////////////////////////////////
         virtual void get_properties(Csi::Xml::Element &prop_xml);

         ////////////////////////////////////////////////////////////
         // set_properties
         ////////////////////////////////////////////////////////////
         virtual void set_properties(Csi::Xml::Element &prop_xml);

         ////////////////////////////////////////////////////////////
         // get_type
         ////////////////////////////////////////////////////////////
         virtual SymbolBase::symbol_type_code get_type()
         { return SymbolBase::type_virtual_source; }

         ////////////////////////////////////////////////////////////
         // add_request
         ////////////////////////////////////////////////////////////
         virtual void add_request(
            request_handle &request, bool more_to_follow);

         ////////////////////////////////////////////////////////////
         // remove_request
         ////////////////////////////////////////////////////////////
         virtual void remove_request(request_handle &request);

         ////////////////////////////////////////////////////////////
         // remove_all_requests
         ////////////////////////////////////////////////////////////
         virtual void remove_all_requests();

         ////////////////////////////////////////////////////////////
         // get_source_symbol
         ////////////////////////////////////////////////////////////
         virtual symbol_handle get_source_symbol();

         ////////////////////////////////////////////////////////////
         // start_set_value
         ////////////////////////////////////////////////////////////
         virtual bool start_set_value(
            SinkBase *sink,
            StrUni const &uri,
            ValueSetter const &value);

         ////////////////////////////////////////////////////////////
         // breakdown_uri
         ////////////////////////////////////////////////////////////
         virtual void breakdown_uri(symbols_type &symbols, StrUni const &uri);

         ////////////////////////////////////////////////////////////
         // get_token_factory
         ////////////////////////////////////////////////////////////
         Csi::Expression::TokenFactory *get_token_factory();

         ////////////////////////////////////////////////////////////
         // onScheduledEvent
         ////////////////////////////////////////////////////////////
         virtual void onScheduledEvent(uint4 id);

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &ev);
         
         // @group: definitions to act as a fields container

         ////////////////////////////////////////////////////////////
         // begin
         ////////////////////////////////////////////////////////////
         typedef VirtualSourceHelpers::field_type field_type;
         typedef Csi::SharedPtr<field_type> field_handle;
         typedef std::list<field_handle> fields_type;
         typedef fields_type::iterator iterator;
         typedef fields_type::const_iterator const_iterator;
         iterator begin()
         { return fields.begin(); }
         const_iterator begin() const
         { return fields.begin(); }

         ////////////////////////////////////////////////////////////
         // end
         ////////////////////////////////////////////////////////////
         iterator end()
         { return fields.end(); }
         const_iterator end() const
         { return fields.end(); }

         ////////////////////////////////////////////////////////////
         // size
         ////////////////////////////////////////////////////////////
         typedef fields_type::size_type size_type;
         size_type size() const
         { return fields.size(); }

         ////////////////////////////////////////////////////////////
         // empty
         ////////////////////////////////////////////////////////////
         bool empty() const
         { return fields.empty(); }

         ////////////////////////////////////////////////////////////
         // front
         ////////////////////////////////////////////////////////////
         typedef field_handle value_type;
         value_type &front()
         { return fields.front(); }
         value_type const &front() const
         { return fields.front(); }

         ////////////////////////////////////////////////////////////
         // back
         ////////////////////////////////////////////////////////////
         value_type &back()
         { return fields.back(); }
         value_type const &back() const
         { return fields.back(); }
         
         // @endgroup: 

      private:
         ////////////////////////////////////////////////////////////
         // check_fields
         ////////////////////////////////////////////////////////////
         void check_fields();

         ////////////////////////////////////////////////////////////
         // save_fields
         ////////////////////////////////////////////////////////////
         void save_fields();

         ////////////////////////////////////////////////////////////
         // send_record
         ////////////////////////////////////////////////////////////
         void send_record(Csi::LgrDate const &stamp);
         
      private:
         ////////////////////////////////////////////////////////////
         // refresh_id
         ////////////////////////////////////////////////////////////
         uint4 refresh_id;

         ////////////////////////////////////////////////////////////
         // scheduler
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Scheduler> scheduler;

         ////////////////////////////////////////////////////////////
         // token_factory
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Csi::Expression::TokenFactory> token_factory;

         ////////////////////////////////////////////////////////////
         // fields
         ////////////////////////////////////////////////////////////
         fields_type fields;

         ////////////////////////////////////////////////////////////
         // requests
         ////////////////////////////////////////////////////////////
         typedef std::list<request_handle> requests_type;
         requests_type requests;

         ////////////////////////////////////////////////////////////
         // record
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Cora::Broker::Record> record;

         ////////////////////////////////////////////////////////////
         // refresh_interval
         ////////////////////////////////////////////////////////////
         uint4 refresh_interval;

         ////////////////////////////////////////////////////////////
         // refresh_base
         ////////////////////////////////////////////////////////////
         Csi::LgrDate refresh_base;

         ////////////////////////////////////////////////////////////
         // source_symbol
         ////////////////////////////////////////////////////////////
         symbol_handle source_symbol;

         ////////////////////////////////////////////////////////////
         // fields_changed
         ////////////////////////////////////////////////////////////
         bool fields_changed;

         ////////////////////////////////////////////////////////////
         // fields_file_name
         ////////////////////////////////////////////////////////////
         StrAsc fields_file_name;

         ////////////////////////////////////////////////////////////
         // last_fields_date
         ////////////////////////////////////////////////////////////
         Csi::LgrDate last_fields_date; 
      };
   };
};


#endif
