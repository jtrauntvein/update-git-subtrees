/* Cora.Broker.DataQuery.h

   Copyright (C) 2009, 2013 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Thursday 19 February 2009
   Last Change: Tuesday 04 June 2013
   Last Commit: $Date: 2013-06-04 11:38:19 -0600 (Tue, 04 Jun 2013) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_Broker_DataQuery_h
#define Cora_Broker_DataQuery_h

#include "Cora.Broker.BrokerBase.h"
#include "Cora.Broker.Record.h"
#include "Csi.Events.h"
#include <deque>


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class DataQueryClient
      ////////////////////////////////////////////////////////////
      class DataQuery;
      class DataQueryClient: public Csi::InstanceValidator
      {
      public:
         ////////////////////////////////////////////////////////////
         // on_started
         //
         // Called by the query when the start ack has been received from the
         // server.  The record object will serve as a prototype for the
         // records that will be returned by the query transaction.
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Record> record_handle;
         virtual void on_started(
            DataQuery *query, record_handle &record)
         { }

         ////////////////////////////////////////////////////////////
         // on_complete
         ////////////////////////////////////////////////////////////
         enum outcome_type
         {
            outcome_unknown = 0,
            outcome_success = 1,
            outcome_connection_failed = 2,
            outcome_invalid_logon = 3,
            outcome_invalid_station_name = 4,
            outcome_invalid_table_name = 5,
            outcome_server_security_failed = 6,
            outcome_unsupported = 7,
            outcome_invalid_range = 8
         };
         virtual void on_complete(
            DataQuery *query, outcome_type outcome) = 0;

         ////////////////////////////////////////////////////////////
         // on_records
         //
         // Called when records have been received for this query
         ////////////////////////////////////////////////////////////
         typedef std::deque<record_handle> records_type;
         virtual void on_records(
            DataQuery *query,
            records_type const &records,
            bool more_expected) = 0;
      };


      ////////////////////////////////////////////////////////////
      // class DataQuery
      //
      // Defines a component that can be used to drive the Broker Data Query
      // transaction with the LoggerNet server.  In order to use this
      // component, the application must supply a client object that is derived
      // from class DataQueryClient.  It should then create an instance of
      // class DataQuery and invoke various methods to set properties such as
      // the table name and query conditions.  It should then invoke one of the
      // two versions of start().  
      ////////////////////////////////////////////////////////////
      class DataQuery:
         public BrokerBase,
         public Csi::EventReceiver
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         DataQuery();

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~DataQuery();

         ////////////////////////////////////////////////////////////
         // get_query_option
         ////////////////////////////////////////////////////////////
         enum query_option_type
         {
            query_not_set = 0,
            query_record_no = 1,
            query_date = 2
         };
         query_option_type get_query_option() const
         { return query_option; }

         ////////////////////////////////////////////////////////////
         // set_query_record_no
         ////////////////////////////////////////////////////////////
         void set_query_record_no(
            uint4 start_file_mark, uint4 start_record_no, uint4 end_file_mark, uint4 end_record_no);

         ////////////////////////////////////////////////////////////
         // set_query_date
         ////////////////////////////////////////////////////////////
         void set_query_date(
            Csi::LgrDate const &begin_date, Csi::LgrDate const &end_date);

         ////////////////////////////////////////////////////////////
         // set_table_name
         ////////////////////////////////////////////////////////////
         void set_table_name(StrUni const &table_name_);

         ////////////////////////////////////////////////////////////
         // get_table_name
         ////////////////////////////////////////////////////////////
         StrUni const &get_table_name() const
         { return table_name; }

         ////////////////////////////////////////////////////////////
         // set_value_factory
         ////////////////////////////////////////////////////////////
         void set_value_factory(Csi::SharedPtr<ValueFactory> factory);

         ////////////////////////////////////////////////////////////
         // get_value_factory
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<ValueFactory> &get_value_factory()
         { return value_factory; }

         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         typedef DataQueryClient client_type;
         void start(client_type *client_, ClientBase *other_client);
         void start(client_type *client_, router_handle router);

         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         virtual void finish();

         ////////////////////////////////////////////////////////////
         // format_outcome
         ////////////////////////////////////////////////////////////
         static void format_outcome(std::ostream &out, client_type::outcome_type outcome);

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &ev);
            
      protected:
         ////////////////////////////////////////////////////////////
         // on_brokerbase_ready
         ////////////////////////////////////////////////////////////
         virtual void on_brokerbase_ready();

         ////////////////////////////////////////////////////////////
         // on_brokerbase_failure
         ////////////////////////////////////////////////////////////
         virtual void on_brokerbase_failure(brokerbase_failure_type failure);

         ////////////////////////////////////////////////////////////
         // on_brokerbase_session_failure
         ////////////////////////////////////////////////////////////
         virtual void on_brokerbase_session_failure()
         { on_brokerbase_failure(brokerbase_failure_session); }

         ////////////////////////////////////////////////////////////
         // onNetMessage
         ////////////////////////////////////////////////////////////
         virtual void onNetMessage(
            Csi::Messaging::Router *router, Csi::Messaging::Message *message);

      private:
         ////////////////////////////////////////////////////////////
         // on_start_ack
         ////////////////////////////////////////////////////////////
         void on_start_ack(Csi::Messaging::Message *message);

         ////////////////////////////////////////////////////////////
         // on_return_records
         ////////////////////////////////////////////////////////////
         void on_return_records(Csi::Messaging::Message *message);
            
      private:
         ////////////////////////////////////////////////////////////
         // client
         ////////////////////////////////////////////////////////////
         client_type *client;

         ////////////////////////////////////////////////////////////
         // state
         ////////////////////////////////////////////////////////////
         enum state_type
         {
            state_standby,
            state_started,
            state_active
         } state;

         ////////////////////////////////////////////////////////////
         // record_desc
         ////////////////////////////////////////////////////////////
         Record::desc_handle record_desc;
         
         ////////////////////////////////////////////////////////////
         // records
         ////////////////////////////////////////////////////////////
         client_type::records_type records;

         ////////////////////////////////////////////////////////////
         // query_option
         ////////////////////////////////////////////////////////////
         query_option_type query_option;
         
         ////////////////////////////////////////////////////////////
         // start_time
         ////////////////////////////////////////////////////////////
         Csi::LgrDate start_time;

         ////////////////////////////////////////////////////////////
         // end_time
         ////////////////////////////////////////////////////////////
         Csi::LgrDate end_time;

         ////////////////////////////////////////////////////////////
         // start_file_mark
         ////////////////////////////////////////////////////////////
         uint4 start_file_mark;

         ////////////////////////////////////////////////////////////
         // start_record_no
         ////////////////////////////////////////////////////////////
         uint4 start_record_no;

         ////////////////////////////////////////////////////////////
         // end_file_mark
         ////////////////////////////////////////////////////////////
         uint4 end_file_mark;

         ////////////////////////////////////////////////////////////
         // end_record_no
         ////////////////////////////////////////////////////////////
         uint4 end_record_no;

         ////////////////////////////////////////////////////////////
         // table_name
         ////////////////////////////////////////////////////////////
         StrUni table_name;

         ////////////////////////////////////////////////////////////
         // value_factory
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<ValueFactory> value_factory;
      };
   };
};


#endif
