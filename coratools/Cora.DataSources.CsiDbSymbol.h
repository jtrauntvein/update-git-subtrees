/* Cora.DataSources.CsiDbSymbol.h

   Copyright (C) 2009, 2014 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Saturday 07 February 2009
   Last Change: Friday 27 June 2014
   Last Commit: $Date: 2014-06-27 16:43:57 -0600 (Fri, 27 Jun 2014) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_DataSources_CsiDbSymbol_h
#define Cora_DataSources_CsiDbSymbol_h

#include "Cora.DataSources.SymbolBase.h"
#include "Cora.DataSources.CsiDbHelpers.MyThread.h"


namespace Cora
{
   namespace DataSources
   {
      ////////////////////////////////////////////////////////////
      // class CsiDbSymbol
      ////////////////////////////////////////////////////////////
      class CsiDbSource;
      class CsiDbSymbol:
         public SymbolBase,
         public Csi::EventReceiver
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         CsiDbSymbol(CsiDbSource *source);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~CsiDbSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         { return type_db_source; }

         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const
         { return true; }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         { return true; }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion();

         ////////////////////////////////////////////////////////////
         // refresh
         ////////////////////////////////////////////////////////////
         virtual void refresh();

         ////////////////////////////////////////////////////////////
         // on_source_connect
         ////////////////////////////////////////////////////////////
         typedef CsiDbHelpers::MyThread thread_type;
         typedef CsiDbHelpers::Dll::connection_handle connection_handle;
         void on_source_connect(
            thread_type *db_thread, connection_handle &db_connection_);

         ////////////////////////////////////////////////////////////
         // on_source_disconnect
         ////////////////////////////////////////////////////////////
         void on_source_disconnect();

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &ev);

      private:
         ////////////////////////////////////////////////////////////
         // on_list_tables_complete
         ////////////////////////////////////////////////////////////
         typedef CsiDbHelpers::ListTablesCommand list_tables_type;
         void on_list_tables_complete(list_tables_type *command);
         
      private:
         ////////////////////////////////////////////////////////////
         // db_source
         ////////////////////////////////////////////////////////////
         CsiDbSource *db_source;

         ////////////////////////////////////////////////////////////
         // expansion_started
         ////////////////////////////////////////////////////////////
         bool expansion_started;

         ////////////////////////////////////////////////////////////
         // db_connection
         ////////////////////////////////////////////////////////////
         CsiDbHelpers::Dll::connection_handle db_connection;

         ////////////////////////////////////////////////////////////
         // db_thread
         ////////////////////////////////////////////////////////////
         CsiDbHelpers::MyThread *db_thread;
      };


      ////////////////////////////////////////////////////////////
      // class CsiDbTableSymbol
      ////////////////////////////////////////////////////////////
      class CsiDbTableSymbol:
         public SymbolBase,
         public Csi::EventReceiver
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         typedef CsiDbHelpers::MyThread thread_type;
         typedef CsiDbHelpers::Dll::connection_handle connection_handle;
         CsiDbTableSymbol(
            StrUni const &name,
            CsiDbSymbol *parent,
            thread_type *db_thread_,
            connection_handle &db_connection_):
            SymbolBase(parent->get_source(), name, parent),
            db_thread(db_thread_),
            db_connection(db_connection_),
            expansion_started(false)
         { }

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~CsiDbTableSymbol()
         { db_connection.clear(); }

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         { return type_table; }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         { return true; }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion()
         {
            expansion_started = true;
            refresh();
         }

         ////////////////////////////////////////////////////////////
         // refresh
         ////////////////////////////////////////////////////////////
         virtual void refresh();

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &ev);

      private:
         ////////////////////////////////////////////////////////////
         // on_list_columns_complete
         ////////////////////////////////////////////////////////////
         typedef CsiDbHelpers::ListColumnsCommand list_columns_type;
         void on_list_columns_complete(list_columns_type *command);

      private:
         ////////////////////////////////////////////////////////////
         // db_thread
         ////////////////////////////////////////////////////////////
         thread_type *db_thread;

         ////////////////////////////////////////////////////////////
         // db_connection
         ////////////////////////////////////////////////////////////
         connection_handle db_connection;

         ////////////////////////////////////////////////////////////
         // expansion_started
         ////////////////////////////////////////////////////////////
         bool expansion_started;
      };


      ////////////////////////////////////////////////////////////
      // class CsiDbColumnSymbol
      ////////////////////////////////////////////////////////////
      class CsiDbColumnSymbol: public SymbolBase
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         CsiDbColumnSymbol(StrAsc const &name, CsiDbTableSymbol *parent):
            SymbolBase(parent->source, name, parent)
         { }

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         { return type_scalar; }

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         { return false; }
      };
   };
};


#endif
