/* Csi.Alarms.ActionExec.h

   Copyright (C) 2012, Campbell Scientific, Inc

   Written by: Jon Trauntvein 
   Date Begun: Tuesday 02 October 2012
   Last Change: Tuesday 02 October 2012
   Last Commit: $Date: 2012-10-03 14:42:01 -0600 (Wed, 03 Oct 2012) $
   Last Changed by: $Author: jon $

*/

#ifndef Csi_Alarms_ActionExec_h
#define Csi_Alarms_ActionExec_h

#include "Csi.Alarms.ActionTemplateBase.h"


namespace Csi
{
   namespace Alarms
   {
      ////////////////////////////////////////////////////////////
      // class ActionExecTemplate
      ////////////////////////////////////////////////////////////
      class ActionExecTemplate: public ActionTemplateBase
      {
      private:
         ////////////////////////////////////////////////////////////
         // path
         ////////////////////////////////////////////////////////////
         StrAsc path;

         ////////////////////////////////////////////////////////////
         // command_line
         ////////////////////////////////////////////////////////////
         StrAsc command_line;

         ////////////////////////////////////////////////////////////
         // show_mode
         ////////////////////////////////////////////////////////////
         int show_mode;
         
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         ActionExecTemplate(Condition *condition);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~ActionExecTemplate();

         ////////////////////////////////////////////////////////////
         // get_type_name
         ////////////////////////////////////////////////////////////
         virtual StrUni get_type_name() const
         { return L"exec"; }

         ////////////////////////////////////////////////////////////
         // read
         ////////////////////////////////////////////////////////////
         virtual void read(Xml::Element &elem);

         ////////////////////////////////////////////////////////////
         // write
         ////////////////////////////////////////////////////////////
         virtual void write(Xml::Element &elem);

      protected:
         ////////////////////////////////////////////////////////////
         // perform_action
         ////////////////////////////////////////////////////////////
         virtual void perform_action();
      };
   };
};


#endif
