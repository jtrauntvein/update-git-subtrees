/* Csi.SimpleDispatch.h

   Copyright (C) 2005, 2010 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Monday 08 August 2005
   Last Change: Thursday 11 November 2010
   Last Commit: $Date: 2010-11-11 13:45:23 -0600 (Thu, 11 Nov 2010) $ 
   Last Changed by: $Author: jon $

*/

#ifndef Csi_SimpleDispatch_h
#define Csi_SimpleDispatch_h

#include "Csi.Events.h"
#include "Csi.Protector.h"
#include "Csi.Condition.h"
#include <list>


namespace Csi
{
   ////////////////////////////////////////////////////////////
   // class SimpleDispatch
   //
   // Defines an object that acts as a dispatcher for CSI events but does not
   // use the windows message queue as a transport mechanism.  Instead, the
   // class will provide a method, do_dispatch() that the application is
   // responsible for calling repeatedly.  This event dispatcher type should
   // not generally be used in a standard windows app because it lacks
   // synchrony with the windows message queue.
   ////////////////////////////////////////////////////////////
   class SimpleDispatch: public EventDispatcher
   {
   public:
      ////////////////////////////////////////////////////////////
      // constructor
      ////////////////////////////////////////////////////////////
      SimpleDispatch();

      ////////////////////////////////////////////////////////////
      // destructor
      ////////////////////////////////////////////////////////////
      virtual ~SimpleDispatch();

      ////////////////////////////////////////////////////////////
      // post
      ////////////////////////////////////////////////////////////
      virtual void post(Event *ev);

      ////////////////////////////////////////////////////////////
      // post_quit_message
      ////////////////////////////////////////////////////////////
      virtual void post_quit_message(int quit_code_);

      ////////////////////////////////////////////////////////////
      // get_quit_code
      ////////////////////////////////////////////////////////////
      int get_quit_code() const
      { return quit_code; }

      ////////////////////////////////////////////////////////////
      // do_dispatch
      //
      // Should be called repeatedly by the application in order to drive the
      // event queue processing.  
      ////////////////////////////////////////////////////////////
      bool do_dispatch();

   protected:
      ////////////////////////////////////////////////////////////
      // unregisterRcvr
      ////////////////////////////////////////////////////////////
      virtual void unregisterRcvr(EventReceiver *rcvr);

   private:
      ////////////////////////////////////////////////////////////
      // events
      ////////////////////////////////////////////////////////////
      typedef std::list<SharedPtr<Event> > event_queue_type;
      typedef Protector<event_queue_type> events_type;
      events_type events;

      ////////////////////////////////////////////////////////////
      // ev_ready
      //
      // Used to signal the condition that events are ready for processing. 
      ////////////////////////////////////////////////////////////
      Condition ev_ready;

      ////////////////////////////////////////////////////////////
      // should_quit
      ////////////////////////////////////////////////////////////
      bool should_quit;

      ////////////////////////////////////////////////////////////
      // quit_code
      ////////////////////////////////////////////////////////////
      int quit_code;
   };
};


#endif
