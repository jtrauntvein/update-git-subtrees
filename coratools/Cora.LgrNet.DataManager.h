/* cora.lgrnet.datamanager.h

   Copyright (C) 2004, 2013 Campbell Scientific, Inc.

   Written by: Tyler Mecham
   Date Begun: Monday 26 January 2004
   Last Change: Tuesday 04 June 2013
   Last Commit: $Date: 2013-06-04 11:38:19 -0600 (Tue, 04 Jun 2013) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef cora_lgrnet_datamanager_h
#define cora_lgrnet_datamanager_h

#include "Cora.Broker.DataAdvisor.h"
#include "Cora.Device.CollectArea.CollectAreaMaintainer.h"
#include "Cora.Device.SettingsEnumerator.h"
#include "OneShot.h"
#include "Cora.Broker.ValueFactory.h"
#include <set>


namespace Cora
{
   namespace LgrNet
   {
      ///////////////////////////////////////////////////////////
      // class InvalidBrokerException
      ///////////////////////////////////////////////////////////
      class InvalidBrokerException:
         public std::exception
      {
      public:
         virtual char const *what() const throw()
         { return "Invalid Broker Name"; }
      };

      ///////////////////////////////////////////////////////////
      // class InvalidTable Exception
      ///////////////////////////////////////////////////////////
      class InvalidTableException:
         public std::exception
      {
      public:
         virtual char const *what() const throw()
         { return "Invalid Table Name"; }
      };

      //@group Forward Declarations
      class BrokerDataManager;
      class TableDataManager;
      class TableDataAdvisor;
      //@endgroup

      ////////////////////////////////////////////////////////////
      // class DataManagerAdviseClient
      ////////////////////////////////////////////////////////////
      class DataManagerAdviseClient:
         public Csi::InstanceValidator
      {
      public:
         //@group typdefs
         typedef Csi::SharedPtr<Cora::Broker::Record> record_type;
         typedef Broker::DataAdvisor::unread_records_type records_type;
         //@endgroup

         ////////////////////////////////////////////////////////////
         // on_advise_ready
         ////////////////////////////////////////////////////////////
         virtual void on_advise_ready(
            TableDataAdvisor *advisor,
            StrUni const &broker_name,
            StrUni const &table_name,
            record_type &record) = 0;
         
         ////////////////////////////////////////////////////////////
         // on_advise_record
         ////////////////////////////////////////////////////////////
         virtual void on_advise_record(
            TableDataAdvisor *advisor,
            StrUni const &broker_name,
            StrUni const &table_name,
            records_type &records) = 0;
         
         ////////////////////////////////////////////////////////////
         // on_advise_failure
         ////////////////////////////////////////////////////////////
         enum failure_type
         {
            failure_unknown = 0,
            failure_connection_failed = 1,
            failure_invalid_logon = 2,
            failure_invalid_station_name = 3,
            failure_invalid_table_name = 4,
            failure_server_security = 5,
            failure_invalid_start_option = 6,
            failure_invalid_order_option = 7,
            failure_table_deleted = 8,
            failure_station_shut_down = 9,
            failure_unsupported = 10,
            failure_invalid_column_name = 11,
            failure_invalid_array_address = 12,
         };
         virtual void on_advise_failure(
            TableDataAdvisor *advisor,
            StrUni const &broker_name,
            StrUni const &table_name,
            failure_type failure) = 0;
      };


      ////////////////////////////////////////////////////////////
      // class DataManager
      ////////////////////////////////////////////////////////////
      class DataManager
      {
      public:
         ////////////////////////////////////////////////////////////
         // Default Constructor
         ////////////////////////////////////////////////////////////
         DataManager();
         
         ////////////////////////////////////////////////////////////
         // Constructor
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<OneShot> oneshot_handle;
         DataManager(oneshot_handle &oneshot);

         ////////////////////////////////////////////////////////////
         // Destructor
         ////////////////////////////////////////////////////////////
         ~DataManager();

         ////////////////////////////////////////////////////////////
         // class StartInfo
         //
         // Defines a class that is used to identify tags that have 
         // been started in the tag browser.
         ////////////////////////////////////////////////////////////
         class StartInfo
         {
         public:
            ////////////////////////////////////////////////////////////
            // Constructor
            ////////////////////////////////////////////////////////////
            StartInfo()
            {
               order_option = Cora::Broker::DataAdvisor::order_real_time;
               start_option = Cora::Broker::DataAdvisor::start_at_newest;
               file_mark_no = 0;
               record_no = 0;
               start_date = 0;
               start_record_offset = 0;
               cache_size_controller = 10;
               start_interval = 0;
            }

            ////////////////////////////////////////////////////////////
            // Destructor
            ////////////////////////////////////////////////////////////
            virtual ~StartInfo(){ }

            ////////////////////////////////////////////////////////////
            // order_option
            ////////////////////////////////////////////////////////////
            Cora::Broker::DataAdvisor::order_option_type order_option;

            ////////////////////////////////////////////////////////////
            // start_option
            ////////////////////////////////////////////////////////////
            Cora::Broker::DataAdvisor::start_option_type start_option;

            ////////////////////////////////////////////////////////////
            // file_mark_no
            ////////////////////////////////////////////////////////////
            uint4 file_mark_no;

            ////////////////////////////////////////////////////////////
            // record_no
            ////////////////////////////////////////////////////////////
            uint4 record_no;

            ////////////////////////////////////////////////////////////
            // start_date
            ////////////////////////////////////////////////////////////
            int8 start_date;

            ////////////////////////////////////////////////////////////
            // start_interval
            ////////////////////////////////////////////////////////////
            int8 start_interval;

            ////////////////////////////////////////////////////////////
            // cache_size_controller
            ////////////////////////////////////////////////////////////
            uint4 cache_size_controller;

            ////////////////////////////////////////////////////////////
            // start_record_offset
            ////////////////////////////////////////////////////////////
            uint4 start_record_offset;
         };

         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Csi::Messaging::Router> router_handle;
         void start(router_handle &router);
         void start(ClientBase *other_client);

         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         void finish();

         ////////////////////////////////////////////////////////////
         // add_data_request
         ////////////////////////////////////////////////////////////
         typedef DataManagerAdviseClient client_type;
         void add_data_request(
            StrUni const &broker_name,
            StrUni const &table_name,
            StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name = L"");

         ////////////////////////////////////////////////////////////
         // remove_data_request
         ////////////////////////////////////////////////////////////
         void remove_data_request(
            StrUni const &broker_name,
            StrUni const &table_name,
            StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name = L"");

         ////////////////////////////////////////////////////////////
         // get_actual_inloc_table_name
         ////////////////////////////////////////////////////////////
         void get_actual_inloc_table_name(
            StrUni const &broker_name, 
            StrUni &table_name);

         ////////////////////////////////////////////////////////////
         // set_value_factory
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Cora::Broker::ValueFactory> value_factory_type;
         void set_value_factory(value_factory_type value_factory);

         ////////////////////////////////////////////////////////////
         // get_inlocs_table_name
         ////////////////////////////////////////////////////////////
         static StrUni get_inlocs_table_name();

      private:
         ////////////////////////////////////////////////////////////
         // started
         ////////////////////////////////////////////////////////////
         bool started;

         ////////////////////////////////////////////////////////////
         // brokers
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<BrokerDataManager> broker_type;
         typedef std::map<StrUni,broker_type> brokers_type;
         brokers_type brokers;

         ////////////////////////////////////////////////////////////
         // other_client
         ////////////////////////////////////////////////////////////
         ClientBase *other_client;

         ////////////////////////////////////////////////////////////
         // router
         ////////////////////////////////////////////////////////////
         router_handle router;

         ////////////////////////////////////////////////////////////
         // oneshot
         ////////////////////////////////////////////////////////////
         oneshot_handle oneshot;

         ////////////////////////////////////////////////////////////
         // value_factory
         ////////////////////////////////////////////////////////////
         value_factory_type value_factory;
      };


      ////////////////////////////////////////////////////////////
      // class BrokerDataManager
      ////////////////////////////////////////////////////////////
      class BrokerDataManager
      {
      public:
         ////////////////////////////////////////////////////////////
         // Constructor
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<OneShot> oneshot_handle;
         BrokerDataManager(
            oneshot_handle &oneshot,
            StrUni const &broker_name);

         ////////////////////////////////////////////////////////////
         // Destructor
         ////////////////////////////////////////////////////////////
         ~BrokerDataManager();
         
         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Csi::Messaging::Router> router_handle;
         void start(router_handle &router);
         void start(ClientBase *other_client);

         ////////////////////////////////////////////////////////////
         // add_data_request
         ////////////////////////////////////////////////////////////
         void add_data_request(
            StrUni const &table_name,
            DataManager::StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name = L"");

         ////////////////////////////////////////////////////////////
         // remove_data_request
         ////////////////////////////////////////////////////////////
         void remove_data_request(
            StrUni const &table_name,
            DataManager::StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name);

         ////////////////////////////////////////////////////////////
         // get_actual_inloc_table_name
         ////////////////////////////////////////////////////////////
         void get_actual_inloc_table_name(StrUni &table_name);

         ////////////////////////////////////////////////////////////
         // set_value_factory
         ////////////////////////////////////////////////////////////
         typedef Cora::LgrNet::DataManager::value_factory_type value_factory_type;
         void set_value_factory(value_factory_type &value_factory);

         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         void finish();

      private:
         ////////////////////////////////////////////////////////////
         // tables
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<TableDataManager> table_type;
         typedef std::map<StrUni,table_type> tables_type;
         tables_type tables;

         ////////////////////////////////////////////////////////////
         // broker_name
         ////////////////////////////////////////////////////////////
         StrUni broker_name;

         ////////////////////////////////////////////////////////////
         // other_client
         ////////////////////////////////////////////////////////////
         ClientBase *other_client;

         ////////////////////////////////////////////////////////////
         // router
         ////////////////////////////////////////////////////////////
         router_handle router;

         ////////////////////////////////////////////////////////////
         // oneshot
         ////////////////////////////////////////////////////////////
         oneshot_handle &oneshot;

         ////////////////////////////////////////////////////////////
         // value_factory
         ////////////////////////////////////////////////////////////
         value_factory_type value_factory;
      };


      ////////////////////////////////////////////////////////////
      // class TableDataManager
      ////////////////////////////////////////////////////////////
      class TableDataManager:
         public Cora::Device::CollectArea::CollectAreaMaintainerClient,
         public Cora::Device::SettingsEnumeratorClient,
         public OneShotClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // Constructor
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<OneShot> oneshot_handle;
         TableDataManager(
            oneshot_handle &oneshot,
            StrUni const &broker_name,
            StrUni const &table_name);

         ////////////////////////////////////////////////////////////
         // Destructor
         ////////////////////////////////////////////////////////////
         ~TableDataManager();

         ////////////////////////////////////////////////////////////
         // set_auto_restart
         ////////////////////////////////////////////////////////////
         void set_auto_restart(bool auto_restart);

         ///////////////////////////////////////////////////////////
         // set_auto_get_next_record_block
         ///////////////////////////////////////////////////////////
         void set_auto_get_next_record_block(bool auto_get_next_record_block);

         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Csi::Messaging::Router> router_handle;
         void start(router_handle &router);
         void start(ClientBase *other_client);

         ////////////////////////////////////////////////////////////
         // add_data_request
         ////////////////////////////////////////////////////////////
         void add_data_request(
            DataManager::StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name = L"");

         ////////////////////////////////////////////////////////////
         // remove_data_request
         ////////////////////////////////////////////////////////////
         void remove_data_request(
            DataManager::StartInfo const &start_info,
            DataManagerAdviseClient *client,
            StrUni const &column_name);

         //@group Cora::Device::CollectArea::CollectAreaMaintainerClient
         ////////////////////////////////////////////////////////////
         // on_started
         ////////////////////////////////////////////////////////////
         virtual void on_started(
            Cora::Device::CollectArea::CollectAreaMaintainer *creator);

         ////////////////////////////////////////////////////////////
         // on_failure
         ////////////////////////////////////////////////////////////
         virtual void on_failure(
            Cora::Device::CollectArea::CollectAreaMaintainer *creator,
            Cora::Device::CollectArea::CollectAreaMaintainerClient::failure_type failure);
         //@endgroup

         //@group Cora::Device::SettingsEnumerator
         ////////////////////////////////////////////////////////////
         // on_started
         ////////////////////////////////////////////////////////////
         virtual void on_started(
            Cora::Device::SettingsEnumerator *enumerator);

         ////////////////////////////////////////////////////////////
         // on_setting_changed
         //
         // Called when a setting has been changed. This method can also be invoked several times
         // when the transaction is first coming up.
         //////////////////////////////////////////////////////////// 
         virtual void on_setting_changed(
            Cora::Device::SettingsEnumerator *enumerator,
            Csi::SharedPtr<Cora::Setting> &setting);

         ////////////////////////////////////////////////////////////
         // on_failure
         //////////////////////////////////////////////////////////// 
         virtual void on_failure(
            Cora::Device::SettingsEnumerator *enumerator,
            Cora::Device::SettingsEnumeratorClient::failure_type failure);
         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_table_name
         ////////////////////////////////////////////////////////////
         StrUni const &get_table_name()
         { return table_name; }

         ////////////////////////////////////////////////////////////
         // restart_maintainer
         ////////////////////////////////////////////////////////////
         void restart_maintainer();

         ////////////////////////////////////////////////////////////
         // restart_settings_getter
         ////////////////////////////////////////////////////////////
         void restart_settings_getter();

         //@group OneShotClient
         ////////////////////////////////////////////////////////////
         // onOneShotFired
         ////////////////////////////////////////////////////////////
         virtual void onOneShotFired(uint4 id);
         //@endgroup

         ////////////////////////////////////////////////////////////
         // set_value_factory
         ////////////////////////////////////////////////////////////
         typedef Cora::LgrNet::DataManager::value_factory_type value_factory_type;
         void set_value_factory(value_factory_type &value_factory);

         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         void finish();

      private:
         ////////////////////////////////////////////////////////////
         // advisors
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<TableDataAdvisor> table_advisor_type;
         typedef std::list<table_advisor_type> table_advisors_type;
         table_advisors_type advisors;

         ////////////////////////////////////////////////////////////
         // maintainer
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Cora::Device::CollectArea::CollectAreaMaintainer> maintainer_type;
         maintainer_type maintainer;

         ////////////////////////////////////////////////////////////
         // settings_getter
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Cora::Device::SettingsEnumerator> settings_getter_type;
         settings_getter_type settings_getter;

         ////////////////////////////////////////////////////////////
         // broker_name
         ////////////////////////////////////////////////////////////
         StrUni broker_name;

         ////////////////////////////////////////////////////////////
         // table_name
         ////////////////////////////////////////////////////////////
         StrUni table_name;

         ////////////////////////////////////////////////////////////
         // other_client
         ////////////////////////////////////////////////////////////
         ClientBase *other_client;

         ////////////////////////////////////////////////////////////
         // router
         ////////////////////////////////////////////////////////////
         router_handle router;

         ////////////////////////////////////////////////////////////
         // state
         ////////////////////////////////////////////////////////////
         enum state_type
         {
            state_standby,
            state_waiting_for_settings,
            state_waiting_for_collect_area,
            state_advise_started,
         } state;

         ////////////////////////////////////////////////////////////
         // is_classic_inloc_table
         ////////////////////////////////////////////////////////////
         bool is_classic_inloc_table;

         ////////////////////////////////////////////////////////////
         // inloc_ids
         ////////////////////////////////////////////////////////////
         typedef std::map<uint2,StrUni> inloc_ids_type;
         inloc_ids_type inloc_ids;

         ////////////////////////////////////////////////////////////
         // max_inlocs_per_request
         ////////////////////////////////////////////////////////////
         uint4 max_inlocs_per_request;

         ////////////////////////////////////////////////////////////
         // pending_tables
         //
         // Keep track of the pending clients that requested the
         // entire input locations table.
         ////////////////////////////////////////////////////////////
         typedef std::list<DataManagerAdviseClient*> pending_tables_type;
         pending_tables_type pending_tables;

         ////////////////////////////////////////////////////////////
         // pending_columns
         //
         // Keep track of the pending clients that requested a
         // a column from the input locations table.
         ////////////////////////////////////////////////////////////
         typedef std::pair<StrUni,DataManagerAdviseClient*> req_type;
         typedef std::list<req_type> pending_columns_type;
         pending_columns_type pending_columns;

         ////////////////////////////////////////////////////////////
         // pending_clients
         //
         // After the pending columns and tables have been added to the
         // maintainer, we need to wait for the advisor to be created.
         // When the advisor has been created, all these pending clients
         // need to be added to the advisor.
         ////////////////////////////////////////////////////////////
         pending_tables_type pending_clients;

         ////////////////////////////////////////////////////////////
         // oneshot
         ////////////////////////////////////////////////////////////
         oneshot_handle &oneshot;

         ////////////////////////////////////////////////////////////
         // maintainer_restart_id
         ////////////////////////////////////////////////////////////
         uint4 maintainer_restart_id;

         ////////////////////////////////////////////////////////////
         // settings_getter_restart_id
         ////////////////////////////////////////////////////////////
         uint4 settings_getter_restart_id;

         ////////////////////////////////////////////////////////////
         // value_factory
         ////////////////////////////////////////////////////////////
         value_factory_type value_factory;

         ////////////////////////////////////////////////////////////
         // auto_restart
         ////////////////////////////////////////////////////////////
         bool auto_restart;

         ///////////////////////////////////////////////////////////
         // auto_get_next_record_block
         ///////////////////////////////////////////////////////////
         bool auto_get_next_record_block;
      };


      ////////////////////////////////////////////////////////////
      // class TableDataAdvisor
      ////////////////////////////////////////////////////////////
      class TableDataAdvisor:
         public Cora::Broker::DataAdvisorClient,
         public OneShotClient,
         public Csi::EventReceiver
      {
      public:
         ////////////////////////////////////////////////////////////
         // Constructor
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<OneShot> oneshot_handle;
         TableDataAdvisor(
            TableDataManager *table_manager,
            oneshot_handle &oneshot,
            StrUni const &broker_name,
            StrUni const &table_name,
            DataManager::StartInfo const &start_info,
            bool is_classic_inloc_table);

         ////////////////////////////////////////////////////////////
         // Destructor
         ////////////////////////////////////////////////////////////
         ~TableDataAdvisor();

         ////////////////////////////////////////////////////////////
         // set_auto_restart
         ////////////////////////////////////////////////////////////
         void set_auto_restart(bool auto_restart);

         ///////////////////////////////////////////////////////////
         // set_auto_get_next_record_block
         ///////////////////////////////////////////////////////////
         void set_auto_get_next_record_block(bool auto_get_next_record_block);

         ////////////////////////////////////////////////////////////
         // start
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Csi::Messaging::Router> router_handle;
         void start(router_handle &router);
         void start(ClientBase *other_client);

         ////////////////////////////////////////////////////////////
         // add_client
         ////////////////////////////////////////////////////////////
         long add_client(DataManagerAdviseClient *client);

         ////////////////////////////////////////////////////////////
         // remove_client
         //
         // Return true if the client existed and was removed otherwise
         // returns false.
         ////////////////////////////////////////////////////////////
         bool remove_client(DataManagerAdviseClient *client);

         //@group Cora::Broker::DataAdvisorClient
         ////////////////////////////////////////////////////////////
         // on_advise_ready
         //
         // Called when the advise transaction has been successfully begun
         ////////////////////////////////////////////////////////////
         virtual void on_advise_ready(
            Cora::Broker::DataAdvisor *tran);

         ////////////////////////////////////////////////////////////
         // on_advise_failure
         //
         // Called when a failure has occurred at some point in the advise
         // transaction
         ////////////////////////////////////////////////////////////
         virtual void on_advise_failure(
            Cora::Broker::DataAdvisor *tran,
            Cora::Broker::DataAdvisorClient::failure_type failure = failure_unknown);

         ////////////////////////////////////////////////////////////
         // on_advise_record
         // 
         // Called when a new data record has been received
         ////////////////////////////////////////////////////////////
         virtual void on_advise_record(
            Cora::Broker::DataAdvisor *tran);
         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_advisor
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Cora::Broker::DataAdvisor> advisor_type;
         advisor_type get_advisor(){ return advisor; }

         ////////////////////////////////////////////////////////////
         // restart
         ////////////////////////////////////////////////////////////
         void restart();

         //@group OneShotClient
         ////////////////////////////////////////////////////////////
         // onOneShotFired
         ////////////////////////////////////////////////////////////
         virtual void onOneShotFired(uint4 id);
         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_table_name
         ////////////////////////////////////////////////////////////
         StrUni const &get_table_name()
         { return table_name; }

         ////////////////////////////////////////////////////////////
         // set_value_factory
         ////////////////////////////////////////////////////////////
         typedef Cora::LgrNet::DataManager::value_factory_type value_factory_type;
         void set_value_factory(value_factory_type &value_factory);

         ////////////////////////////////////////////////////////////
         // finish
         ////////////////////////////////////////////////////////////
         void finish();

         //@group Csi::EventReceiver
         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(Csi::SharedPtr<Csi::Event> &event);
         //@endgroup

         ///////////////////////////////////////////////////////////
         // get_next_record_block
         ///////////////////////////////////////////////////////////
         void get_next_record_block()
         {
            if(advisor.get_rep() && !auto_get_next_record_block)
               advisor->get_next_block();
         }

      private:
         ///////////////////////////////////////////////////////////
         // table_data_manager
         ///////////////////////////////////////////////////////////
         TableDataManager *table_data_manager;

         ////////////////////////////////////////////////////////////
         // last_record
         //
         // A record with the meta data that will be sent to clients
         // who get added after the advisor has already started.
         ////////////////////////////////////////////////////////////
         typedef Cora::Broker::DataAdvisor::record_handle record_handle;
         record_handle last_record;

         ////////////////////////////////////////////////////////////
         // broker_name
         ////////////////////////////////////////////////////////////
         StrUni broker_name;

         ////////////////////////////////////////////////////////////
         // table_name
         ////////////////////////////////////////////////////////////
         StrUni table_name;

         ////////////////////////////////////////////////////////////
         // advisor
         ////////////////////////////////////////////////////////////
         advisor_type advisor;

         ////////////////////////////////////////////////////////////
         // clients
         ////////////////////////////////////////////////////////////
         typedef std::set<DataManagerAdviseClient*> clients_type;
         clients_type clients;

         ////////////////////////////////////////////////////////////
         // is_started
         ////////////////////////////////////////////////////////////
         bool is_started;

         ////////////////////////////////////////////////////////////
         // records_received
         ////////////////////////////////////////////////////////////
         bool records_received;

         ////////////////////////////////////////////////////////////
         // is_classic_inloc_table
         ////////////////////////////////////////////////////////////
         bool is_classic_inloc_table;

         ////////////////////////////////////////////////////////////
         // other_client
         ////////////////////////////////////////////////////////////
         ClientBase *other_client;

         ////////////////////////////////////////////////////////////
         // router
         ////////////////////////////////////////////////////////////
         router_handle router;

         ////////////////////////////////////////////////////////////
         // oneshot
         ////////////////////////////////////////////////////////////
         oneshot_handle &oneshot;

         ////////////////////////////////////////////////////////////
         // data_advise_restart_id
         ////////////////////////////////////////////////////////////
         uint4 data_advise_restart_id;

         ////////////////////////////////////////////////////////////
         // auto_restart
         ////////////////////////////////////////////////////////////
         bool auto_restart;

         ///////////////////////////////////////////////////////////
         // auto_get_next_record_block
         ///////////////////////////////////////////////////////////
         bool auto_get_next_record_block;
      };
   };
};

#endif //Cora_LgrNet_DataManager_h
