/* Csi.DevConfig.SettingCatalog.h

   Copyright (C) 2003, 2006 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Tuesday 16 December 2003
   Last Change: Thursday 19 October 2006
   Last Commit: $Date: 2007-02-01 14:58:26 -0600 (Thu, 01 Feb 2007) $ 
   Last Changed by: $Author: tmecham $

*/

#ifndef Csi_DevConfig_SettingCatalog_h
#define Csi_DevConfig_SettingCatalog_h

#include "Csi.DevConfig.SettingDesc.h"
#include "Csi.Xml.Element.h"


namespace Csi
{
   namespace DevConfig
   {
      ////////////////////////////////////////////////////////////
      // class SettingCatalog
      //
      // Defines a container for the set of available setting descriptions for
      // a device major version.
      ////////////////////////////////////////////////////////////
      class SettingCatalog
      {
      public:
         typedef SharedPtr<SettingDesc> value_type;
         typedef std::list<value_type> settings_type;
      private:
         ////////////////////////////////////////////////////////////
         // settings
         ////////////////////////////////////////////////////////////
         settings_type settings;

         ////////////////////////////////////////////////////////////
         // major_version
         ////////////////////////////////////////////////////////////
         byte major_version;

         ////////////////////////////////////////////////////////////
         // library_dir
         ////////////////////////////////////////////////////////////
         StrAsc library_dir;
         
      public:
         ////////////////////////////////////////////////////////////
         // default constructor
         ////////////////////////////////////////////////////////////
         SettingCatalog():
            major_version(0)
         { }

         ////////////////////////////////////////////////////////////
         // copy constructor
         ////////////////////////////////////////////////////////////
         SettingCatalog(SettingCatalog const &other):
            settings(other.settings),
            major_version(other.major_version)
         { }

         ////////////////////////////////////////////////////////////
         // copy operator
         ////////////////////////////////////////////////////////////
         SettingCatalog &operator =(SettingCatalog const &other)
         {
            settings = other.settings;
            major_version = other.major_version;
            return *this;
         }

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         ~SettingCatalog()
         { }

         //@group setting description element access
         ////////////////////////////////////////////////////////////
         // begin
         ////////////////////////////////////////////////////////////
         typedef settings_type::iterator iterator;
         iterator begin()
         { return settings.begin(); }

         ////////////////////////////////////////////////////////////
         // end
         ////////////////////////////////////////////////////////////
         iterator end()
         { return settings.end(); }

         ////////////////////////////////////////////////////////////
         // size
         ////////////////////////////////////////////////////////////
         settings_type::size_type size() const
         { return settings.size(); }

         ////////////////////////////////////////////////////////////
         // empty
         ////////////////////////////////////////////////////////////
         bool empty() const
         { return settings.empty(); }
         
         ////////////////////////////////////////////////////////////
         // front
         ////////////////////////////////////////////////////////////
         value_type const &front() const
         { return settings.front(); }

         ////////////////////////////////////////////////////////////
         // back
         ////////////////////////////////////////////////////////////
         value_type const &back() const
         { return settings.back(); } 
         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_major_version
         ////////////////////////////////////////////////////////////
         byte get_major_version() const
         { return major_version; }

         ////////////////////////////////////////////////////////////
         // get_setting (by name)
         ////////////////////////////////////////////////////////////
         iterator get_setting(
            StrAsc const &name,
            bool add_if_not_present = false);

         ////////////////////////////////////////////////////////////
         // get_setting (by id)
         ////////////////////////////////////////////////////////////
         iterator get_setting(uint2 id);

         ////////////////////////////////////////////////////////////
         // init_from_xml
         ////////////////////////////////////////////////////////////
         void init_from_xml(
            Csi::Xml::Element &xml_data,
            StrAsc const &library_dir_);
      };
   };
};


#endif
