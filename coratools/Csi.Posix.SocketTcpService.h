/* Csi.Posix.SocketTcpService.h

   Copyright (C) 2005, 2013 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Wednesday 24 August 2005
   Last Change: Thursday 04 April 2013
   Last Commit: $Date: 2013-10-10 10:42:58 -0600 (Thu, 10 Oct 2013) $ 
   Last Changed by: $Author: jon $

*/

#ifndef Csi_Posix_SocketTcpService_h
#define Csi_Posix_SocketTcpService_h

#include "Csi.Posix.SocketBase.h"
#include "Csi.Thread.h"
#include "Csi.Condition.h"


namespace Csi
{
   namespace Posix
   {
      ////////////////////////////////////////////////////////////
      // class SocketTcpService
      //
      // Defines a base class for an object that offers a TCP service on a
      // given port and, optionally, IP interface address.  Incoming
      // connections are reported using a virtual method, on_accept().  Any
      // errors will be reported using the base class' on_socket_error().
      ////////////////////////////////////////////////////////////
      class SocketTcpService:
         public SocketBase,
         private Thread
      {
      protected:
         ////////////////////////////////////////////////////////////
         // service_port
         //
         // Specifies the TCP port on which this service will be published. 
         ////////////////////////////////////////////////////////////
         uint2 service_port;

         ////////////////////////////////////////////////////////////
         // local_only
         ////////////////////////////////////////////////////////////
         bool local_only;

         ////////////////////////////////////////////////////////////
         // listening_addresses
         ////////////////////////////////////////////////////////////
         SocketAddress::addresses_type listening_addresses;

         ////////////////////////////////////////////////////////////
         // last_error
         ////////////////////////////////////////////////////////////
         StrAsc last_error;

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         SocketTcpService();

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~SocketTcpService()
         { stop_service(); }

         ////////////////////////////////////////////////////////////
         // start_service
         ////////////////////////////////////////////////////////////
         virtual void start_service(
            uint2 service_port_, bool local_only_ = false);

         ////////////////////////////////////////////////////////////
         // stop_service
         ////////////////////////////////////////////////////////////
         virtual void stop_service();

         ////////////////////////////////////////////////////////////
         // get_service_port
         ////////////////////////////////////////////////////////////
         uint2 get_service_port() const
         { return service_port; }

         ////////////////////////////////////////////////////////////
         // get_local_only
         ////////////////////////////////////////////////////////////
         bool get_local_only() const
         { return local_only; }

         ////////////////////////////////////////////////////////////
         // get_listening_addresses
         ////////////////////////////////////////////////////////////
         typedef SocketAddress::addresses_type addresses_type;
         addresses_type const &get_listening_addresses() const
         { return listening_addresses; }

         ////////////////////////////////////////////////////////////
         // get_last_error
         ////////////////////////////////////////////////////////////
         StrAsc const &get_last_error() const
         { return last_error; }

         ////////////////////////////////////////////////////////////
         // set_logger
         //
         // Sets a reference to an event receiver that will handle log event messages
         // from the service thread.
         ////////////////////////////////////////////////////////////
         void set_logger(EventReceiver *logger_);

         ////////////////////////////////////////////////////////////
         // set_allow_ipv6
         //
         // Controls whether the service will off IPv6 support.
         ////////////////////////////////////////////////////////////
         void set_allow_ipv6(bool enabled);
         
      protected:
         ////////////////////////////////////////////////////////////
         // on_accept
         ////////////////////////////////////////////////////////////
         typedef int SOCKET;
         virtual void on_accept(SOCKET new_connection) = 0;

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(SharedPtr<Event> &ev);

      private:
         ////////////////////////////////////////////////////////////
         // wait_for_end
         ////////////////////////////////////////////////////////////
         virtual void wait_for_end();

         ////////////////////////////////////////////////////////////
         // execute
         ////////////////////////////////////////////////////////////
         virtual void execute();
         
      private:
         ////////////////////////////////////////////////////////////
         // should_stop
         //
         // Set by stop_service in order to help signal the thread that it must
         // stop.  
         ////////////////////////////////////////////////////////////
         bool should_stop;

         ////////////////////////////////////////////////////////////
         // started_condition
         ////////////////////////////////////////////////////////////
         Condition started_condition;

         ////////////////////////////////////////////////////////////
         // logger
         ////////////////////////////////////////////////////////////
         EventReceiver *logger;

         ////////////////////////////////////////////////////////////
         // allow_ipv6
         ////////////////////////////////////////////////////////////
         bool allow_ipv6;
      };
   };
};


#endif
