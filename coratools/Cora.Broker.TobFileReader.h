/* Cora.Broker.TobFileReader.h

   Copyright (C) 2006, 2016 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Friday 11 August 2006
   Last Change: Monday 11 July 2016
   Last Commit: $Date: 2016-07-11 09:29:07 -0600 (Mon, 11 Jul 2016) $
   Last Changed by: $Author: jon $

*/

#ifndef Cora_Broker_TobFileReader_h
#define Cora_Broker_TobFileReader_h

#include "Cora.Broker.DataFileReader.h"


//@group class forward declarations
namespace Csi
{
   namespace Tob2
   {
      class DataFile;
      class Frame;
   };
};
//@endgroup


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class TobFileReader
      //
      // Defines a data file reader that is able to read TOB1, TOB2, and TOB3
      // CSI data file types. 
      ////////////////////////////////////////////////////////////
      class TobFileReader: public DataFileReader
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         TobFileReader(
            value_factory_handle value_factory = 0);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~TobFileReader();

         ////////////////////////////////////////////////////////////
         // open
         ////////////////////////////////////////////////////////////
         virtual void open(
            StrAsc const &file_name, StrAsc const &labels_file_name);

         ////////////////////////////////////////////////////////////
         // resynch
         //
         // Overloads the base class's version to relocate the oldest and
         // newest frames in the file. 
         ////////////////////////////////////////////////////////////
         virtual void resynch();

         ////////////////////////////////////////////////////////////
         // close
         ////////////////////////////////////////////////////////////
         virtual void close();

         ////////////////////////////////////////////////////////////
         // hibernate
         ////////////////////////////////////////////////////////////
         virtual void hibernate();

         ////////////////////////////////////////////////////////////
         // wake_up
         ////////////////////////////////////////////////////////////
         virtual bool wake_up(bool &all_data_overwritten);

         ////////////////////////////////////////////////////////////
         // read_next_record
         ////////////////////////////////////////////////////////////
         virtual read_outcome_type read_next_record(
            record_handle &destination,
            bool *file_mark_after_record = 0,
            bool *remove_mark_after_record = 0,
            uint4 array_id = 0);

         ////////////////////////////////////////////////////////////
         // generate_index
         ////////////////////////////////////////////////////////////
         virtual void generate_index(index_type &index, bool &should_abort, uint4 *next_record_no);

         ////////////////////////////////////////////////////////////
         // has_time_stamp
         ////////////////////////////////////////////////////////////
         virtual bool has_time_stamp() const;

         ////////////////////////////////////////////////////////////
         // has_record_no
         ////////////////////////////////////////////////////////////
         virtual bool has_record_no() const;

         ////////////////////////////////////////////////////////////
         // get_header_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_header_len();

         ////////////////////////////////////////////////////////////
         // get_header_sig
         ////////////////////////////////////////////////////////////
         virtual uint2 get_header_sig();
         
         ////////////////////////////////////////////////////////////
         // get_data_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_len();

         ////////////////////////////////////////////////////////////
         // get_data_offset
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_offset();

         ////////////////////////////////////////////////////////////
         // seek_to_newest
         ////////////////////////////////////////////////////////////
         virtual void seek_to_newest(uint4 array_id);
         
         ////////////////////////////////////////////////////////////
         // seek_data
         ////////////////////////////////////////////////////////////
         virtual void seek_data(int8 offset, bool search_for_prev = false);

      private:
         ////////////////////////////////////////////////////////////
         // data_file
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Csi::Tob2::DataFile> data_file;

         ////////////////////////////////////////////////////////////
         // current_frame
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Csi::Tob2::Frame> current_frame;

         ////////////////////////////////////////////////////////////
         // frame_record
         ////////////////////////////////////////////////////////////
         uint4 frame_record;

         ////////////////////////////////////////////////////////////
         // record_buffer
         ////////////////////////////////////////////////////////////
         StrBin record_buffer;

         ////////////////////////////////////////////////////////////
         // current_frame_is_valid
         //
         // Set to false if the next frame needs to be read from data_file. 
         ////////////////////////////////////////////////////////////
         bool current_frame_is_valid;

         ////////////////////////////////////////////////////////////
         // oldest_frame_pos
         //
         // The position of the beginning of the oldest frame
         ////////////////////////////////////////////////////////////
         int8 oldest_frame_pos;

         ////////////////////////////////////////////////////////////
         // newest_frame_pos
         //
         // Specifies the position of the newest frame
         ////////////////////////////////////////////////////////////
         int8 newest_frame_pos;

         ////////////////////////////////////////////////////////////
         // last_record_no
         ////////////////////////////////////////////////////////////
         uint4 last_record_no;
      };
   };
};


#endif
