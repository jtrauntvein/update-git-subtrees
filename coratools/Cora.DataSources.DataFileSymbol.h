/* Cora.DataSources.DataFileSymbol.h

   Copyright (C) 2008, 2014 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Wednesday 20 August 2008
   Last Change: Friday 27 June 2014
   Last Commit: $Date: 2014-06-27 16:43:57 -0600 (Fri, 27 Jun 2014) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_DataSources_DataFileSymbol_h
#define Cora_DataSources_DataFileSymbol_h

#include "Cora.DataSources.SymbolBase.h"
#include "Cora.Broker.DataFileReader.h"


namespace Cora
{
   namespace DataSources
   {
      ////////////////////////////////////////////////////////////
      // class DataFileSymbol
      ////////////////////////////////////////////////////////////
      class DataFileSource;
      class DataFileSymbol: public SymbolBase
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         DataFileSymbol(DataFileSource *source);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~DataFileSymbol();

         ////////////////////////////////////////////////////////////
         // get_symbol_type
         ////////////////////////////////////////////////////////////
         virtual symbol_type_code get_symbol_type() const
         { return type_file_source; }
         
         ////////////////////////////////////////////////////////////
         // is_connected
         ////////////////////////////////////////////////////////////
         virtual bool is_connected() const;

         ////////////////////////////////////////////////////////////
         // is_enabled
         ////////////////////////////////////////////////////////////
         virtual bool is_enabled() const;

         ////////////////////////////////////////////////////////////
         // can_expand
         ////////////////////////////////////////////////////////////
         virtual bool can_expand() const
         { return true; }

         ////////////////////////////////////////////////////////////
         // start_expansion
         ////////////////////////////////////////////////////////////
         virtual void start_expansion();

         ////////////////////////////////////////////////////////////
         // reload_symbols
         ////////////////////////////////////////////////////////////
         void reload_symbols();
         
      private:
         ////////////////////////////////////////////////////////////
         // source
         ////////////////////////////////////////////////////////////
         DataFileSource *source;
      };
   };
};


#endif
