/* Cora.Broker.Tob1Header.h

   Copyright (C) 2009, 2017 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Monday 02 March 2009
   Last Change: Friday 03 February 2017
   Last Commit: $Date: 2017-02-03 17:51:00 -0600 (Fri, 03 Feb 2017) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_Broker_Tob1Header_h
#define Cora_Broker_Tob1Header_h

#include "Cora.Broker.Record.h"
#include <vector>


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class Tob1Field
      ////////////////////////////////////////////////////////////
      class Tob1Field
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         Tob1Field()
         { }
         
         ////////////////////////////////////////////////////////////
         // copy constructor
         ////////////////////////////////////////////////////////////
         Tob1Field(Tob1Field const &other):
            field_name(other.field_name),
            units(other.units),
            process(other.process),
            data_type(other.data_type),
            string_len(other.string_len)
         { }
         
         ////////////////////////////////////////////////////////////
         // copy operator
         ////////////////////////////////////////////////////////////
         Tob1Field &operator ()(Tob1Field const &other)
         {
            field_name = other.field_name;
            units = other.units;
            process = other.process;
            data_type = other.data_type;
            string_len = other.string_len;
            return *this;
         }
         
         ////////////////////////////////////////////////////////////
         // normal constructor
         ////////////////////////////////////////////////////////////
         Tob1Field(
            StrAsc const &field_name_,
            StrAsc const &type_str,
            StrAsc const &units_ = "",
            StrAsc const &process_ = ""):
            field_name(field_name_),
            units(units_),
            process(process_),
            string_len(1)
         {
            parse_tob_data_type(type_str.c_str(), data_type, string_len);
         }
         
         ////////////////////////////////////////////////////////////
         // get_field_name
         ////////////////////////////////////////////////////////////
         StrAsc const &get_field_name() const
         { return field_name; }
         
         ////////////////////////////////////////////////////////////
         // get_data_type
         ////////////////////////////////////////////////////////////
         CsiLgrTypeCode get_data_type() const
         { return data_type; }

         ////////////////////////////////////////////////////////////
         // get_units
         ////////////////////////////////////////////////////////////
         StrAsc const &get_units() const
         { return units; }

         /**
          * Sets the units string.
          */
         void set_units(StrAsc const &value)
         { units = value; }

         ////////////////////////////////////////////////////////////
         // get_process
         ////////////////////////////////////////////////////////////
         StrAsc const &get_process() const
         { return process; }

         /**
          * Sets the process string.
          */
         void set_process(StrAsc const &value)
         { process = value; }
         
         ////////////////////////////////////////////////////////////
         // get_string_len
         ////////////////////////////////////////////////////////////
         uint4 get_string_len() const
         { return string_len; }
         
         ////////////////////////////////////////////////////////////
         // get_field_size
         ////////////////////////////////////////////////////////////
         uint4 get_field_size() const
         { 
            uint4 rtn = csiTypeLen(static_cast<CsiDbTypeCode>(data_type));
            if(string_len > 0)
               rtn *= string_len;
            return rtn;
         }
         
      private:
         ////////////////////////////////////////////////////////////
         // field_name
         ////////////////////////////////////////////////////////////
         StrAsc field_name;
         
         ////////////////////////////////////////////////////////////
         // data_type
         ////////////////////////////////////////////////////////////
         CsiLgrTypeCode data_type;

         ////////////////////////////////////////////////////////////
         // units
         ////////////////////////////////////////////////////////////
         StrAsc units;

         ////////////////////////////////////////////////////////////
         // process
         ////////////////////////////////////////////////////////////
         StrAsc process;
         
         ////////////////////////////////////////////////////////////
         // string_len
         ////////////////////////////////////////////////////////////
         uint4 string_len;
      };
         
      
      ////////////////////////////////////////////////////////////
      // class Tob1Header
      ////////////////////////////////////////////////////////////
      class Tob1Header
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         Tob1Header(void const *buff, size_t buff_len);

         /**
          * @return Returns the table name.
          */
         StrAsc const &get_station_name() const
         { return station_name; }

         /**
          * @param value Specifies the station name.
          */
         void set_station_name(StrAsc const &value)
         { station_name = value; }

         /**
          * @return Returns the table name.
          */
         StrAsc const &get_table_name() const
         { return table_name; }

         /**
          * @param value Specifies the table name.
          */
         void set_table_name(StrAsc const &value)
         { table_name = value; }
         
         ////////////////////////////////////////////////////////////
         // get_header_end
         ////////////////////////////////////////////////////////////
         uint4 get_header_end() const
         { return header_end; }
         
         ////////////////////////////////////////////////////////////
         // get_record_len
         ////////////////////////////////////////////////////////////
         uint4 get_record_len() const
         { return record_len; }
         
         // @group fields container definitions
         
         ////////////////////////////////////////////////////////////
         // begin
         ////////////////////////////////////////////////////////////
         typedef std::vector<Tob1Field> fields_type;
         typedef fields_type::iterator iterator;
         typedef fields_type::const_iterator const_iterator;
         iterator begin()
         { return fields.begin(); }
         const_iterator begin() const
         { return fields.begin(); }
         
         ////////////////////////////////////////////////////////////
         // end
         ////////////////////////////////////////////////////////////
         iterator end()
         { return fields.end(); }
         const_iterator end() const
         { return fields.end(); }
         
         ////////////////////////////////////////////////////////////
         // empty
         ////////////////////////////////////////////////////////////
         bool empty() const
         { return fields.empty(); }
         
         ////////////////////////////////////////////////////////////
         // size
         ////////////////////////////////////////////////////////////
         typedef fields_type::size_type size_type;
         size_type size() const
         { return fields.size(); }
         
         ////////////////////////////////////////////////////////////
         // front
         ////////////////////////////////////////////////////////////
         typedef fields_type::value_type value_type;
         value_type &front()
         { return fields.front(); }
         value_type const &front() const
         { return fields.front(); }
         
         ////////////////////////////////////////////////////////////
         // back
         ////////////////////////////////////////////////////////////
         value_type &back()
         { return fields.back(); }
         value_type const &back() const
         { return fields.back(); }
         
         // @endgroup
         
         ////////////////////////////////////////////////////////////
         // make_record_desc
         //
         // Creates a record descriotion using the field information from
         // the header.  
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<RecordDesc> record_desc_handle;
         record_desc_handle make_record_desc();
         
         ////////////////////////////////////////////////////////////
         // make_record
         //
         // Generates a new record
         ////////////////////////////////////////////////////////////
         typedef Csi::SharedPtr<Record> record_handle;
         record_handle make_record();
         
         ////////////////////////////////////////////////////////////
         // read_record
         ////////////////////////////////////////////////////////////
         void read_record(
            record_handle &record, void const *buff, uint4 buff_len);

         ////////////////////////////////////////////////////////////
         // has_record_no
         ////////////////////////////////////////////////////////////
         bool has_record_no() const
         { return record_pos != 0xffffffff; }

         ////////////////////////////////////////////////////////////
         // has_time_stamp
         ////////////////////////////////////////////////////////////
         bool has_time_stamp() const
         { return seconds_pos != 0xffffffff; }
         
      private:
         ////////////////////////////////////////////////////////////
         // station_name
         ////////////////////////////////////////////////////////////
         StrAsc station_name;

         ////////////////////////////////////////////////////////////
         // model
         ////////////////////////////////////////////////////////////
         StrAsc model;

         ////////////////////////////////////////////////////////////
         // serial_no
         ////////////////////////////////////////////////////////////
         StrAsc serial_no;

         ////////////////////////////////////////////////////////////
         // os_version
         ////////////////////////////////////////////////////////////
         StrAsc os_version;

         ////////////////////////////////////////////////////////////
         // dld_name
         ////////////////////////////////////////////////////////////
         StrAsc dld_name;

         ////////////////////////////////////////////////////////////
         // dld_sig
         ////////////////////////////////////////////////////////////
         StrAsc dld_sig;
         
         ////////////////////////////////////////////////////////////
         // table_name
         ////////////////////////////////////////////////////////////
         StrAsc table_name;
         
         ////////////////////////////////////////////////////////////
         // fields
         ////////////////////////////////////////////////////////////
         fields_type fields;
         
         ////////////////////////////////////////////////////////////
         // header_end
         ////////////////////////////////////////////////////////////
         uint4 header_end;
         
         ////////////////////////////////////////////////////////////
         // record_len
         ////////////////////////////////////////////////////////////
         uint4 record_len;
         
         ////////////////////////////////////////////////////////////
         // data_start_pos
         ////////////////////////////////////////////////////////////
         uint4 data_start_pos;
         
         ////////////////////////////////////////////////////////////
         // seconds_pos
         ////////////////////////////////////////////////////////////
         uint4 seconds_pos;
         
         ////////////////////////////////////////////////////////////
         // nsecs_pos
         ////////////////////////////////////////////////////////////
         uint4 nsecs_pos;
         
         ////////////////////////////////////////////////////////////
         // record_pos
         ////////////////////////////////////////////////////////////
         uint4 record_pos;

         ////////////////////////////////////////////////////////////
         // factory
         ////////////////////////////////////////////////////////////
         ValueFactory factory;

         ////////////////////////////////////////////////////////////
         // record_desc
         ////////////////////////////////////////////////////////////
         record_desc_handle record_desc;
      };
   };
};


#endif
