/* Csi.Posix.Mutex.h

   Copyright (C) 2005, Campbell Scientific, Inc

   Written by: Jon Trauntvein
   Date Begun: Wednesday 30 March 2005
   Last Change: Wednesday 30 March 2005
   Last Commit: $Date: 2007-02-01 14:58:26 -0600 (Thu, 01 Feb 2007) $ (UTC)
   Last Changed by: $Author: tmecham $

*/

#ifndef Csi_Posix_Mutex_h
#define Csi_Posix_Mutex_h

#include "Csi.OsException.h"
#include <semaphore.h>
#include <pthread.h>


namespace Csi
{
   namespace Posix
   {
      ////////////////////////////////////////////////////////////
      // class Mutex
      ////////////////////////////////////////////////////////////
      class Mutex
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         Mutex(char const *name = 0);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~Mutex();

         ////////////////////////////////////////////////////////////
         // lock
         ////////////////////////////////////////////////////////////
         void lock();

         ////////////////////////////////////////////////////////////
         // try_lock
         ////////////////////////////////////////////////////////////
         bool try_lock();

         ////////////////////////////////////////////////////////////
         // release
         ////////////////////////////////////////////////////////////
         void release();

      private:
         ////////////////////////////////////////////////////////////
         // sem_handle
         //
         // Keeps track of the named semaphore handle.  This object will be
         // allocated in the constructor if the application has specified a
         // name for the mutex.  It will be null if no name was specified in
         // the constructor
         ////////////////////////////////////////////////////////////
         sem_t *sem_handle;

         ////////////////////////////////////////////////////////////
         // mutex_handle
         ////////////////////////////////////////////////////////////
         pthread_mutex_t mutex_handle;

         ////////////////////////////////////////////////////////////
         // is_locked
         //
         // Set to true if this object has locked the mutex
         ////////////////////////////////////////////////////////////
         bool is_locked;
      };
   };
};

#endif
