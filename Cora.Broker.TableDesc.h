/* Cora.Broker.TableDesc.h

   Copyright (C) 2000, 2008 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Friday 14 April 2000
   Last Change: Tuesday 12 August 2008
   Last Commit: $Date: 2008-08-12 13:51:21 -0600 (Tue, 12 Aug 2008) $ 
   Committed by: $Author: jon $
   
*/

#ifndef Cora_Broker_TableDesc_h
#define Cora_Broker_TableDesc_h

#include "Cora.Broker.ColumnDesc.h"
#include "Csi.SharedPtr.h"
#include <list>


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class TableDesc
      //
      // Represents data broker tables and their columns as described by the
      // "Data Broker Table Definition Get" transaction. This class is similar
      // to DataSet::RecordDesc but it can be initialised by reading a table
      // definition get acknowledgement message.
      //////////////////////////////////////////////////////////// 
      class TableDesc
      {
      public:
         typedef Csi::SharedPtr<ColumnDesc> value_type;
         typedef value_type column_desc_handle;
         typedef std::list<value_type> columns_type;
         typedef columns_type::const_iterator const_iterator;
         typedef columns_type::size_type size_type;
      
      private:
         ////////////////////////////////////////////////////////////
         // name
         //////////////////////////////////////////////////////////// 
         StrUni name;
      
         ////////////////////////////////////////////////////////////
         // interval
         //////////////////////////////////////////////////////////// 
         int8 interval;

         ////////////////////////////////////////////////////////////
         // num_records
         //////////////////////////////////////////////////////////// 
         uint4 num_records;

         ////////////////////////////////////////////////////////////
         // original_num_records
         //////////////////////////////////////////////////////////// 
         uint4 original_num_records;

         ////////////////////////////////////////////////////////////
         // columns
         //////////////////////////////////////////////////////////// 
         columns_type columns;

      public:
         ////////////////////////////////////////////////////////////
         // name constructor
         //////////////////////////////////////////////////////////// 
         TableDesc(StrUni const &name_);
      
         ////////////////////////////////////////////////////////////
         // default constructor
         //////////////////////////////////////////////////////////// 
         TableDesc();

         ////////////////////////////////////////////////////////////
         // copy constructor
         //////////////////////////////////////////////////////////// 
         TableDesc(TableDesc const &other);

         ////////////////////////////////////////////////////////////
         // copy operator
         //////////////////////////////////////////////////////////// 
         TableDesc &operator =(TableDesc const &other);

         ////////////////////////////////////////////////////////////
         // destructor
         //////////////////////////////////////////////////////////// 
         virtual ~TableDesc();

         ////////////////////////////////////////////////////////////
         // read
         //
         // Reads the portion of the table definition in the "Data Broker Table
         // Definition Get Acknowledgement" message beyond the response code.
         //////////////////////////////////////////////////////////// 
         bool read(Csi::Messaging::Message *msg);
      
         //@group access methods
         ////////////////////////////////////////////////////////////
         // get_name
         //////////////////////////////////////////////////////////// 
         StrUni const &get_name() const { return name; }

         ////////////////////////////////////////////////////////////
         // set_interval
         ////////////////////////////////////////////////////////////
         void set_interval(int8 interval_)
         { interval = interval_; }
         
         ////////////////////////////////////////////////////////////
         // get_interval
         //////////////////////////////////////////////////////////// 
         int8 get_interval() const { return interval; }

         ////////////////////////////////////////////////////////////
         // set_num_records
         ////////////////////////////////////////////////////////////
         void set_num_records(uint4 num_records_)
         { num_records = num_records_; }
         
         ////////////////////////////////////////////////////////////
         // get_num_records
         //////////////////////////////////////////////////////////// 
         uint4 get_num_records() const { return num_records; }

         ////////////////////////////////////////////////////////////
         // set_original_num_records
         ////////////////////////////////////////////////////////////
         void set_original_num_records(uint4 original_num_records_)
         { original_num_records = original_num_records_; }
         
         ////////////////////////////////////////////////////////////
         // get_original_num_records
         //////////////////////////////////////////////////////////// 
         uint4 get_original_num_records() const { return original_num_records; }

         //@group columns access methods
         ////////////////////////////////////////////////////////////
         // begin/end
         //////////////////////////////////////////////////////////// 
         const_iterator begin() const { return columns.begin(); }
         const_iterator end() const { return columns.end(); }

         ////////////////////////////////////////////////////////////
         // size
         //
         // Returns the number of columns associated with this table
         //////////////////////////////////////////////////////////// 
         size_type size() const { return columns.size(); }

         ////////////////////////////////////////////////////////////
         // empty
         //
         // Returns true if there are no columns associated with this table
         //////////////////////////////////////////////////////////// 
         bool empty() const { return columns.empty(); }
         //@endgroup

         ////////////////////////////////////////////////////////////
         // find_column_desc
         //
         // Seaches for the specified column and copies it to the column_desc
         // parameter if found. Returns true if the column description could be
         // found or false if the column description could not be found.
         //////////////////////////////////////////////////////////// 
         bool find_column_desc(
            value_type &desc,
            StrUni const &column_name) const;

         ////////////////////////////////////////////////////////////
         // add_column_desc
         ////////////////////////////////////////////////////////////
         void add_column_desc(value_type &desc)
         { columns.push_back(desc); }
         //@endgroup
      };
   };
};

#endif
