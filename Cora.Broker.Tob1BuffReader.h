/* Cora.Broker.Tob1BuffReader.h

   Copyright (C) 2009, 2016 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Saturday 09 May 2009
   Last Change: Monday 31 October 2016
   Last Commit: $Date: 2016-11-17 14:42:13 -0600 (Thu, 17 Nov 2016) $
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Cora_Broker_Tob1BuffReader_h
#define Cora_Broker_Tob1BuffReader_h

#include "Cora.Broker.DataFileReader.h"
#include "Cora.Broker.Tob1Header.h"


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class Tob1BuffReader
      //
      // Defines a "data file reader" that works on application supplied TOB1
      // memory buffers rather than working with a data file.  
      ////////////////////////////////////////////////////////////
      class Tob1BuffReader: public DataFileReader
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         Tob1BuffReader(
            void const *tob1_header,
            uint4 tob1_header_len,
            value_factory_handle value_factory);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~Tob1BuffReader();

         ////////////////////////////////////////////////////////////
         // open
         ////////////////////////////////////////////////////////////
         virtual void open(
            StrAsc const &file_name,
            StrAsc const &labels_file_name);

         ////////////////////////////////////////////////////////////
         // hibernate
         ////////////////////////////////////////////////////////////
         virtual void hibernate()
         { }

         ////////////////////////////////////////////////////////////
         // wake_up
         ////////////////////////////////////////////////////////////
         virtual bool wake_up(bool &all_data_overwritten)
         {
            all_data_overwritten = false;
            return true;
         }

         ////////////////////////////////////////////////////////////
         // read_next_record
         ////////////////////////////////////////////////////////////
         virtual read_outcome_type read_next_record(
            record_handle &destination,
            bool *file_mark_after_record,
            bool *remove_mark_after_record,
            uint4 array_id = 0);

         ////////////////////////////////////////////////////////////
         // generate_index
         ////////////////////////////////////////////////////////////
         virtual void generate_index(index_type &index, bool &should_abort, uint4 *next_record_no);

         ////////////////////////////////////////////////////////////
         // has_time_stamp
         ////////////////////////////////////////////////////////////
         virtual bool has_time_stamp() const;

         ////////////////////////////////////////////////////////////
         // has_record_no
         ////////////////////////////////////////////////////////////
         virtual bool has_record_no() const;

         ////////////////////////////////////////////////////////////
         // get_header_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_header_len();

         ////////////////////////////////////////////////////////////
         // get_header_sig
         ////////////////////////////////////////////////////////////
         virtual uint2 get_header_sig();

         ////////////////////////////////////////////////////////////
         // get_data_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_len();

         ////////////////////////////////////////////////////////////
         // get_data_offset
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_offset();

         ////////////////////////////////////////////////////////////
         // seek_data
         ////////////////////////////////////////////////////////////
         virtual void seek_data(int8 offset, bool search_for_prev_record = true);

         ////////////////////////////////////////////////////////////
         // set_data
         ////////////////////////////////////////////////////////////
         void set_data(void const *buff, uint4 buff_len);
         
      private:
         ////////////////////////////////////////////////////////////
         // header
         ////////////////////////////////////////////////////////////
         Csi::SharedPtr<Tob1Header> header;

         ////////////////////////////////////////////////////////////
         // header_sig
         ////////////////////////////////////////////////////////////
         uint2 header_sig;

         ////////////////////////////////////////////////////////////
         // records_buff
         ////////////////////////////////////////////////////////////
         StrBin records_buff;

         ////////////////////////////////////////////////////////////
         // read_offset
         ////////////////////////////////////////////////////////////
         size_t read_offset;
      };
   };
};

   
#endif
