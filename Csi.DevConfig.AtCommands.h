/* Csi.DevConfig.AtCommands.h

   Copyright (C) 2013, 2013 Campbell Scientific, Inc.

   Written by: Jon Trauntvein 
   Date Begun: Wednesday 19 June 2013
   Last Change: Thursday 27 June 2013
   Last Commit: $Date: 2013-06-27 12:34:29 -0600 (Thu, 27 Jun 2013) $
   Last Changed by: $Author: jon $

*/

#ifndef Csi_DevConfig_AtCommands_h
#define Csi_DevConfig_AtCommands_h

#include "Csi.DevConfig.Session.h"
#include "Csi.DevConfig.DeviceDesc.h"
#include "Csi.DevConfig.Setting.h"
#include "Csi.Xml.Element.h"
#include "Csi.Expression.ExpressionHandler.h"


namespace Csi
{
   namespace DevConfig
   {
      class AtCommandSession;
      namespace AtCommandsHelpers
      {
         ////////////////////////////////////////////////////////////
         // class Translator
         //
         // Defines an object that will translate between the settings as
         // specified in the device description and the setting string as
         // supplied and expected by the device.  
         ////////////////////////////////////////////////////////////
         class Command;
         class Translator
         {
         public:
            ////////////////////////////////////////////////////////////
            // constructor
            ////////////////////////////////////////////////////////////
            typedef SharedPtr<SettingDesc> setting_desc_handle;
            Translator(
               Xml::Element &elem,
               setting_desc_handle &desc_);

            ////////////////////////////////////////////////////////////
            // destructor
            ////////////////////////////////////////////////////////////
            virtual ~Translator();

            ////////////////////////////////////////////////////////////
            // get_id
            ////////////////////////////////////////////////////////////
            uint2 get_id() const
            { return desc->get_identifier(); }

            ////////////////////////////////////////////////////////////
            // on_command_response
            ////////////////////////////////////////////////////////////
            void on_command_complete(Command *command);

            ////////////////////////////////////////////////////////////
            // write
            ////////////////////////////////////////////////////////////
            void write(SharedPtr<Message> &message);
            
         private:
            ////////////////////////////////////////////////////////////
            // desc
            ////////////////////////////////////////////////////////////
            setting_desc_handle desc;

            ////////////////////////////////////////////////////////////
            // setting
            ////////////////////////////////////////////////////////////
            typedef SharedPtr<Setting> setting_handle;
            setting_handle setting;
            
            ////////////////////////////////////////////////////////////
            // read_command
            ////////////////////////////////////////////////////////////
            StrAsc read_command;

            ////////////////////////////////////////////////////////////
            // write_command
            ////////////////////////////////////////////////////////////
            StrAsc write_command;

            ////////////////////////////////////////////////////////////
            // write_postfix
            ////////////////////////////////////////////////////////////
            StrAsc write_postfix;

            ////////////////////////////////////////////////////////////
            // use_last_response
            //
            // Indicates that this setting should make use of the last response
            // that was reported.  
            ////////////////////////////////////////////////////////////
            bool use_last_response;

            ////////////////////////////////////////////////////////////
            // dependencies
            ////////////////////////////////////////////////////////////
            typedef SharedPtr<Expression::ExpressionHandler> expression_handle;
            typedef std::pair<StrAsc, expression_handle> dependency_type;
            typedef std::deque<dependency_type> dependencies_type;
            dependencies_type dependencies;

            friend class AtCommandSession;
         };

         
         ////////////////////////////////////////////////////////////
         // class Command
         ////////////////////////////////////////////////////////////
         class Command: public OneShotClient
         {
         public:
            ////////////////////////////////////////////////////////////
            // constructor
            ////////////////////////////////////////////////////////////
            Command(
               AtCommandSession *session_,
               StrAsc const &name_,
               byte tran_no_,
               bool for_init_ = false);

            ////////////////////////////////////////////////////////////
            // destructor
            ////////////////////////////////////////////////////////////
            virtual ~Command();

            ////////////////////////////////////////////////////////////
            // session
            ////////////////////////////////////////////////////////////
            AtCommandSession *session;

            ////////////////////////////////////////////////////////////
            // start
            ////////////////////////////////////////////////////////////
            virtual void start();

            ////////////////////////////////////////////////////////////
            // on_data
            ////////////////////////////////////////////////////////////
            virtual void on_data(void const *buff, uint4 buff_len);

            ////////////////////////////////////////////////////////////
            // on_complete
            ////////////////////////////////////////////////////////////
            enum outcome_type
            {
               outcome_unknown = 0,
               outcome_success = 1,
               outcome_synch_failed = 2,
               outcome_no_echo = 3,
               outcome_error = 4
            };
            virtual void on_complete(outcome_type outcome);
            
            ////////////////////////////////////////////////////////////
            // onOneShotFired
            ////////////////////////////////////////////////////////////
            virtual void onOneShotFired(uint4 id);

         public:
            ////////////////////////////////////////////////////////////
            // name
            ////////////////////////////////////////////////////////////
            StrAsc const name;

            ////////////////////////////////////////////////////////////
            // command
            ////////////////////////////////////////////////////////////
            StrAsc command;

            ////////////////////////////////////////////////////////////
            // tran_no
            ////////////////////////////////////////////////////////////
            byte const tran_no;

            ////////////////////////////////////////////////////////////
            // state
            ////////////////////////////////////////////////////////////
            enum state_type
            {
               state_before_start,
               state_send_command,
               state_wait_response,
               state_synch_plus1,
               state_synch_plus2,
               state_synch_plus3,
               state_no_op,
               state_complete,
            } state;

            ////////////////////////////////////////////////////////////
            // response
            ////////////////////////////////////////////////////////////
            StrAsc response;

            ////////////////////////////////////////////////////////////
            // timer_id
            ////////////////////////////////////////////////////////////
            uint4 timer_id;

            ////////////////////////////////////////////////////////////
            // retry_count
            ////////////////////////////////////////////////////////////
            uint4 retry_count;

            ////////////////////////////////////////////////////////////
            // timer
            ////////////////////////////////////////////////////////////
            SharedPtr<OneShot> timer;

            ////////////////////////////////////////////////////////////
            // outcome
            ////////////////////////////////////////////////////////////
            outcome_type outcome;

            ////////////////////////////////////////////////////////////
            // translators
            ////////////////////////////////////////////////////////////
            typedef SharedPtr<Translator> translator_handle;
            typedef std::deque<translator_handle> translators_type;
            translators_type translators;

            ////////////////////////////////////////////////////////////
            // for_init
            ////////////////////////////////////////////////////////////
            bool for_init;
         };
      };

      
      ////////////////////////////////////////////////////////////
      // class AtCommandSession
      //
      // Defines an object that implements a devconfig protocol emulation layer
      // on top of a modem's AT command set.  The command set will be specified
      // by an XML structure referenced by the device description. 
      ////////////////////////////////////////////////////////////
      class AtCommandSession: public Session
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<DeviceDesc> device_desc_handle;
         AtCommandSession(
            SharedPtr<SessionDriverBase> driver,
            SharedPtr<OneShot> timer,
            device_desc_handle &device_desc);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~AtCommandSession();

         ////////////////////////////////////////////////////////////
         // add_transaction
         ////////////////////////////////////////////////////////////
         virtual void add_transaction(
            TransactionClient *client,
            message_handle command,
            uint4 max_retry_count,
            uint4 timeout_interval,
            byte tran_no = 0);

         ////////////////////////////////////////////////////////////
         // suspend
         ////////////////////////////////////////////////////////////
         virtual void suspend();

         ////////////////////////////////////////////////////////////
         // on_driver_open
         ////////////////////////////////////////////////////////////
         virtual void on_driver_open();

         ////////////////////////////////////////////////////////////
         // on_driver_data
         ////////////////////////////////////////////////////////////
         virtual void on_driver_data(void const *buff, uint4 buff_len);

         ////////////////////////////////////////////////////////////
         // on_driver_failure
         ////////////////////////////////////////////////////////////
         virtual void on_driver_failure();

         ////////////////////////////////////////////////////////////
         // send_data
         ////////////////////////////////////////////////////////////
         void send_data(void const *buff, uint4 buff_len);

         ////////////////////////////////////////////////////////////
         // get_timer
         ////////////////////////////////////////////////////////////
         SharedPtr<OneShot> &get_timer()
         { return timer; }

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(SharedPtr<Event> &ev);

         ////////////////////////////////////////////////////////////
         // on_command_complete
         ////////////////////////////////////////////////////////////
         typedef AtCommandsHelpers::Command command_type;
         virtual void on_command_complete(command_type *command);

      private:
         ////////////////////////////////////////////////////////////
         // do_next_transaction
         ////////////////////////////////////////////////////////////
         void do_next_transaction();

         ////////////////////////////////////////////////////////////
         // do_next_command
         ////////////////////////////////////////////////////////////
         void do_next_command();

         ////////////////////////////////////////////////////////////
         // on_get_settings_cmd
         ////////////////////////////////////////////////////////////
         void on_get_settings_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // send_get_settings_ack
         ////////////////////////////////////////////////////////////
         void send_get_settings_ack();

         ////////////////////////////////////////////////////////////
         // on_set_settings_cmd
         ////////////////////////////////////////////////////////////
         void on_set_settings_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // on_get_setting_fragment_cmd
         ////////////////////////////////////////////////////////////
         void on_get_setting_fragment_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // on_set_setting_fragment_cmd
         ////////////////////////////////////////////////////////////
         void on_set_setting_fragment_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // on_control_cmd
         ////////////////////////////////////////////////////////////
         void on_control_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // send_control_ack
         ////////////////////////////////////////////////////////////
         void send_control_ack();
         
      private:
         ////////////////////////////////////////////////////////////
         // timer
         ////////////////////////////////////////////////////////////
         SharedPtr<OneShot> timer;

         ////////////////////////////////////////////////////////////
         // init_commands
         ////////////////////////////////////////////////////////////
         typedef std::deque<StrAsc> init_commands_type;
         init_commands_type init_commands;

         ////////////////////////////////////////////////////////////
         // save_commands
         ////////////////////////////////////////////////////////////
         typedef init_commands_type save_commands_type;
         save_commands_type save_commands;

         ////////////////////////////////////////////////////////////
         // device_desc
         ////////////////////////////////////////////////////////////
         device_desc_handle device_desc;

         ////////////////////////////////////////////////////////////
         // translators
         ////////////////////////////////////////////////////////////
         typedef AtCommandsHelpers::Translator translator_type;
         typedef SharedPtr<translator_type> translator_handle;
         typedef std::deque<translator_handle> translators_type;
         translators_type translators;

         ////////////////////////////////////////////////////////////
         // pending_gets
         ////////////////////////////////////////////////////////////
         translators_type pending_gets;

         ////////////////////////////////////////////////////////////
         // transactions
         ////////////////////////////////////////////////////////////
         typedef std::pair<message_handle, TransactionClient *> transaction_type;
         typedef std::list<transaction_type> transactions_type;
         transactions_type transactions;

         ////////////////////////////////////////////////////////////
         // commands
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<command_type> command_handle;
         typedef std::deque<command_handle> commands_type;
         commands_type commands;
         
         ////////////////////////////////////////////////////////////
         // current_command
         ////////////////////////////////////////////////////////////
         command_handle current_command;

         ////////////////////////////////////////////////////////////
         // current_control_action
         ////////////////////////////////////////////////////////////
         byte current_control_action;

         ////////////////////////////////////////////////////////////
         // pending_saves
         ////////////////////////////////////////////////////////////
         translators_type pending_saves;
      };
   };
};


#endif
