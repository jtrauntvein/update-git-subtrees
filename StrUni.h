/* StrUni.h

   Copyright (C) 1998, 2012 Campbell Scientific, Inc.
   
   Written by: Jon Trauntvein
   Date Begun: Monday 21 September 1998
   Last Change: Thursday 19 July 2012
   Last Commit: $Date: 2012-07-19 12:47:08 -0600 (Thu, 19 Jul 2012) $ 
   Committed by: $Author: jon $
   
*/

#ifndef StrUni_h
#define StrUni_h

#include "TermStr.h"
#include "StrAsc.h"


////////////////////////////////////////////////////////////
// class StrUni
//
// Declares a class that dynamically manages storage for unicode string objects. All methods
// guarantee the presence of a null terminator just past the end of the string.
////////////////////////////////////////////////////////////
class StrUni: public TermStr<wchar_t>
{
public:
   ////////////////////////////////////////////////////////////
   // default constructor
   //////////////////////////////////////////////////////////// 
   StrUni();

   ////////////////////////////////////////////////////////////
   // copy constructor
   //////////////////////////////////////////////////////////// 
   StrUni(StrUni const &other);

   ////////////////////////////////////////////////////////////
   // zero-terminated array constructor
   //////////////////////////////////////////////////////////// 
   StrUni(wchar_t const *buff);

   ////////////////////////////////////////////////////////////
   // ASCII or multibyte array constructor
   //////////////////////////////////////////////////////////// 
   StrUni(char const *buff, bool utf8 = true);

   ////////////////////////////////////////////////////////////
   // array constructor with a supplied length
   //////////////////////////////////////////////////////////// 
   StrUni(wchar_t const *buff, size_t buff_len);

   ////////////////////////////////////////////////////////////
   // construct from StrAsc
   ////////////////////////////////////////////////////////////
   StrUni(StrAsc const &s, bool utf8 = true);

   ////////////////////////////////////////////////////////////
   // copy operator
   //////////////////////////////////////////////////////////// 
   StrUni &operator =(StrUni const &other);

   ////////////////////////////////////////////////////////////
   // terminated array copy operator
   //////////////////////////////////////////////////////////// 
   StrUni &operator =(wchar_t const *buff);

   ////////////////////////////////////////////////////////////
   // ASCII or multibyte array constructor
   //////////////////////////////////////////////////////////// 
   StrUni &operator =(char const *buff);

   ////////////////////////////////////////////////////////////
   // assign to StrAsc
   ////////////////////////////////////////////////////////////
   StrUni &operator =(StrAsc const &s);

   ////////////////////////////////////////////////////////////
   // append utf-8 array
   ////////////////////////////////////////////////////////////
   StrUni &operator +=(char const *s)
   { append_utf8(s); return *this; }

   ////////////////////////////////////////////////////////////
   // append (wide array)
   ////////////////////////////////////////////////////////////
   StrUni &operator +=(wchar_t const &s)
   { append(s); return *this; }

   ////////////////////////////////////////////////////////////
   // append (other
   ////////////////////////////////////////////////////////////
   StrUni &operator +=(StrUni const &other)
   {
      append(other.c_str(), other.length());
      return *this;
   }

   ////////////////////////////////////////////////////////////
   // append (StrAsc)
   ////////////////////////////////////////////////////////////
   StrUni &operator +=(StrAsc const &other)
   {
      append_utf8(other.c_str(), other.length());
      return *this;
   }

   ////////////////////////////////////////////////////////////
   // append multi-byte array
   //////////////////////////////////////////////////////////// 
   void append_mb(char const *buff);
   void append_mb(char const *buff, size_t buff_len);

   ////////////////////////////////////////////////////////////
   // append_utf8
   ////////////////////////////////////////////////////////////
   void append_utf8(char const *buff);
   void append_utf8(char const *buff, size_t buff_len);

   //@group conversion to multi-byte or ASCII
   ////////////////////////////////////////////////////////////
   // toMulti
   //////////////////////////////////////////////////////////// 
   void toMulti(StrAsc &dest) const;

   ////////////////////////////////////////////////////////////
   // to_utf8
   ////////////////////////////////////////////////////////////
   StrAsc to_utf8() const;
   
   //@endgroup
};

//@group stream insertion and extraction operators
////////////////////////////////////////////////////////////
// terminated unicode array insertion operator
//
// Inserts the null-terminated unicode array object into the stream
////////////////////////////////////////////////////////////
std::ostream &operator <<(std::ostream &out, wchar_t const *s);

////////////////////////////////////////////////////////////
// stream insertion operator
//
// Inserts an StrUni object as text into the stream
//////////////////////////////////////////////////////////// 
inline std::ostream &operator <<(std::ostream &out, StrUni const &s)
{ return out << s.c_str(); }

////////////////////////////////////////////////////////////
// StrUni stream extraction operator
//
// Skips whitespace to the beginning of the next word and then reads the word
// until the end of stream is encountered or new whitespace is found
////////////////////////////////////////////////////////////
std::istream &operator >>(std::istream &in, StrUni &s);

////////////////////////////////////////////////////////////
// wide stream insertion operator
////////////////////////////////////////////////////////////
std::wostream &operator <<(std::wostream &out, StrUni const &s);
//@endgroup

////////////////////////////////////////////////////////////
// binary concatentation
////////////////////////////////////////////////////////////
inline StrUni operator +(StrUni const &s1, StrUni const &s2)
{ StrUni rtn(s1); rtn += s2; return rtn; }

#endif
