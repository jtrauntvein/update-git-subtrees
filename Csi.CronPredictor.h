/* Csi.CronPredictor.h

   Copyright (C) 2012, 2013 Campbell Scientific, Inc.

   Written by: Jon Trauntvein 
   Date Begun: Saturday 10 November 2012
   Last Change: Tuesday 19 February 2013
   Last Commit: $Date: 2013-02-19 13:05:09 -0600 (Tue, 19 Feb 2013) $
   Last Changed by: $Author: jon $

*/

#ifndef Csi_CronPredictor_h
#define Csi_CronPredictor_h

#include "CsiTypeDefs.h"
#include "Csi.LgrDate.h"
#include "Csi.SharedPtr.h"
#include <vector>
#include <set>
#include <iterator>
#include <algorithm>


namespace Csi
{
   namespace CronPredictorHelpers
   {
      ////////////////////////////////////////////////////////////
      // class Rotor
      ////////////////////////////////////////////////////////////
      class Rotor
      {
      protected:
         ////////////////////////////////////////////////////////////
         // allowed_values
         ////////////////////////////////////////////////////////////
         typedef std::vector<uint4> values_type;
         values_type allowed_values;

         ////////////////////////////////////////////////////////////
         // selected_pos
         ////////////////////////////////////////////////////////////
         uint4 selected_pos;

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         typedef std::set<uint4> allowed_type;
         Rotor(
            allowed_type const &allowed, uint4 min, uint4 max);

         ////////////////////////////////////////////////////////////
         // default constructor
         ////////////////////////////////////////////////////////////
         Rotor():
            selected_pos(0)
         { }

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~Rotor()
         { allowed_values.clear(); }

         ////////////////////////////////////////////////////////////
         // set
         //
         // Sets the rotor position to something greater than or equal to the
         // specified value.  Returns true if the rotor position had to be
         // reset. 
         ////////////////////////////////////////////////////////////
         virtual bool set(uint4 value);

         ////////////////////////////////////////////////////////////
         // increment
         //
         // Sets the rotor position to the next available value.  Returns true
         // if the position had to be rotated back to the first value.
         ////////////////////////////////////////////////////////////
         virtual bool increment();

         ////////////////////////////////////////////////////////////
         // reset
         //
         // Resets the rotor to the position of the first allowed value.
         ////////////////////////////////////////////////////////////
         virtual void reset()
         { selected_pos = 0; }

         ////////////////////////////////////////////////////////////
         // get_value
         //
         // Returns the value for the currently selected rotor position.
         ////////////////////////////////////////////////////////////
         virtual uint4 get_value()
         {
            uint4 rtn(0);
            if(allowed_values.size() > selected_pos)
               rtn = allowed_values[selected_pos];
            return rtn;
         }
      };


      ////////////////////////////////////////////////////////////
      // class YearRotor
      ////////////////////////////////////////////////////////////
      class YearRotor: public Rotor
      {
      private:
         ////////////////////////////////////////////////////////////
         // year
         ////////////////////////////////////////////////////////////
         uint4 year;

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         YearRotor():
            year(1990)
         { }

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~YearRotor()
         { }

         ////////////////////////////////////////////////////////////
         // set
         ////////////////////////////////////////////////////////////
         virtual bool set(uint4 value)
         {
            year = value;
            return false;
         }

         ////////////////////////////////////////////////////////////
         // reset
         ////////////////////////////////////////////////////////////
         virtual void reset()
         { }

         ////////////////////////////////////////////////////////////
         // increment
         ////////////////////////////////////////////////////////////
         virtual bool increment()
         {
            ++year;
            return false;
         }

         ////////////////////////////////////////////////////////////
         // get_value
         ////////////////////////////////////////////////////////////
         virtual uint4 get_value()
         { return year; }
      };


      ////////////////////////////////////////////////////////////
      // class DayRotor
      ////////////////////////////////////////////////////////////
      class DayRotor: public Rotor
      {
      private:
         ////////////////////////////////////////////////////////////
         // week_days
         ////////////////////////////////////////////////////////////
         values_type week_days;

         ////////////////////////////////////////////////////////////
         // month_days
         ////////////////////////////////////////////////////////////
         values_type month_days;

         ////////////////////////////////////////////////////////////
         // year_rotor
         ////////////////////////////////////////////////////////////
         SharedPtr<Rotor> year_rotor;

         ////////////////////////////////////////////////////////////
         // month_rotor
         ////////////////////////////////////////////////////////////
         SharedPtr<Rotor> month_rotor;

         ////////////////////////////////////////////////////////////
         // current_year
         ////////////////////////////////////////////////////////////
         uint4 current_year;

         ////////////////////////////////////////////////////////////
         // current_month
         ////////////////////////////////////////////////////////////
         uint4 current_month;

      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         DayRotor(
            allowed_type const &month_allowed,
            allowed_type const &week_allowed,
            SharedPtr<Rotor> year_rotor_,
            SharedPtr<Rotor> month_rotor_);

         ////////////////////////////////////////////////////////////
         // fill_allowed
         ////////////////////////////////////////////////////////////
         void fill_allowed();

         ////////////////////////////////////////////////////////////
         // set
         ////////////////////////////////////////////////////////////
         virtual bool set(uint4 value)
         {
            fill_allowed();
            return Rotor::set(value);
         }

         ////////////////////////////////////////////////////////////
         // get_value
         ////////////////////////////////////////////////////////////
         virtual uint4 get_value()
         {
            fill_allowed();
            return Rotor::get_value();
         }
      };
   };

   
   ////////////////////////////////////////////////////////////
   // class CronPredictor
   //
   // Defines a component that can be used to predict the next time that a cron
   // scheduled event should occur based upon a provided time stamp.  
   ////////////////////////////////////////////////////////////
   class CronPredictor
   {
   public:
      ////////////////////////////////////////////////////////////
      // constructor
      ////////////////////////////////////////////////////////////
      typedef CronPredictorHelpers::Rotor::allowed_type allowed_type;
      CronPredictor(
         allowed_type const &months,
         allowed_type const &days,
         allowed_type const &week_days,
         allowed_type const &hours,
         allowed_type const &minutes);

      ////////////////////////////////////////////////////////////
      // destructor
      ////////////////////////////////////////////////////////////
      virtual ~CronPredictor();

      ////////////////////////////////////////////////////////////
      // predict
      //
      // Based upon the specified date, predicts when the next scheduled event
      // will occur.
      ////////////////////////////////////////////////////////////
      LgrDate predict(LgrDate const &current);

   private:
      ////////////////////////////////////////////////////////////
      // year_rotor
      ////////////////////////////////////////////////////////////
      typedef CronPredictorHelpers::Rotor rotor_type;
      typedef SharedPtr<rotor_type> rotor_handle;
      rotor_handle year_rotor;

      ////////////////////////////////////////////////////////////
      // month_rotor
      ////////////////////////////////////////////////////////////
      rotor_handle month_rotor;

      ////////////////////////////////////////////////////////////
      // day_rotor
      ////////////////////////////////////////////////////////////
      rotor_handle day_rotor;

      ////////////////////////////////////////////////////////////
      // hour_rotor
      ////////////////////////////////////////////////////////////
      rotor_handle hour_rotor;

      ////////////////////////////////////////////////////////////
      // minute_rotor
      ////////////////////////////////////////////////////////////
      rotor_handle minute_rotor;
   };
};

#endif
