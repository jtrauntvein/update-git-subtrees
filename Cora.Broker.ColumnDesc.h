/* Cora.Broker.ColumnDesc.h

   Copyright (C) 2000, 2015 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Friday 14 April 2000
   Last Change: Monday 27 July 2015
   Last Commit: $Date: 2015-07-27 13:32:00 -0600 (Mon, 27 Jul 2015) $ 
   Committed by: $Author: jon $
   
*/

#ifndef Cora_Broker_ColumnDesc_h
#define Cora_Broker_ColumnDesc_h

#include "StrUni.h"
#include "CsiTypes.h"
#include <vector>
#include "Csi.Messaging.Message.h"
#include "Csi.ArrayDimensions.h"


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class ColumnDesc
      // 
      // Represents a table column as described by the "Data Broker Table
      // Definition Get" or "Data Broker Extended Table Definition Get"
      // transactions.
      ////////////////////////////////////////////////////////////
      class ColumnDesc
      {
      public:
         ////////////////////////////////////////////////////////////
         // struct piece_type
         //
         // Describes a piece of the column. Every column will have at least
         // one piece.
         ////////////////////////////////////////////////////////////
         struct piece_type
         {
            uint4 num_elements;
            uint4 start_index; 
         };
         typedef std::vector<piece_type> pieces_type;
         typedef pieces_type::const_iterator const_iterator;
         typedef pieces_type::const_reverse_iterator const_reverse_iterator;
         typedef pieces_type::size_type size_type;

      private:
         ////////////////////////////////////////////////////////////
         // name
         //////////////////////////////////////////////////////////// 
         StrUni name;

         ////////////////////////////////////////////////////////////
         // description
         //////////////////////////////////////////////////////////// 
         StrUni description;

         ////////////////////////////////////////////////////////////
         // data_type
         //////////////////////////////////////////////////////////// 
         CsiDbTypeCode data_type;

         ////////////////////////////////////////////////////////////
         // modifying_command
         //////////////////////////////////////////////////////////// 
         uint4 modifying_command;

         ////////////////////////////////////////////////////////////
         // units
         //////////////////////////////////////////////////////////// 
         StrUni units;

         ////////////////////////////////////////////////////////////
         // process
         //////////////////////////////////////////////////////////// 
         StrUni process;

         ////////////////////////////////////////////////////////////
         // dimensions
         //
         // The dimensions of this column
         //////////////////////////////////////////////////////////// 
         Csi::ArrayDimensions dimensions;

         ////////////////////////////////////////////////////////////
         // pieces
         //
         // The set of pieces for this column
         //////////////////////////////////////////////////////////// 
         pieces_type pieces;

         ////////////////////////////////////////////////////////////
         // string_len
         ////////////////////////////////////////////////////////////
         uint4 string_len;

      public:
         ////////////////////////////////////////////////////////////
         // default constructor
         //////////////////////////////////////////////////////////// 
         ColumnDesc();

         ////////////////////////////////////////////////////////////
         // copy constructor
         //////////////////////////////////////////////////////////// 
         ColumnDesc(ColumnDesc const &other);

         ////////////////////////////////////////////////////////////
         // destructor
         //////////////////////////////////////////////////////////// 
         virtual ~ColumnDesc();
      
         ////////////////////////////////////////////////////////////
         // copy operator
         //////////////////////////////////////////////////////////// 
         ColumnDesc &operator =(ColumnDesc const &other);

         ////////////////////////////////////////////////////////////
         // read
         //
         // Reads a message formatted as part of the data broker table
         // definition get acknowledgement.
         //////////////////////////////////////////////////////////// 
         bool read(Csi::Messaging::Message *in);

         //@group access methods
         ////////////////////////////////////////////////////////////
         // get_name
         //////////////////////////////////////////////////////////// 
         StrUni const &get_name() const { return name; }

         ////////////////////////////////////////////////////////////
         // set_name
         ////////////////////////////////////////////////////////////
         void set_name(StrUni const &name_)
         { name = name_; }

         ////////////////////////////////////////////////////////////
         // get_description
         //////////////////////////////////////////////////////////// 
         StrUni const &get_description() const { return description; }

         ////////////////////////////////////////////////////////////
         // set_description
         ////////////////////////////////////////////////////////////
         void set_description(StrUni const &description_)
         { description = description_; }

         ////////////////////////////////////////////////////////////
         // get_data_type
         //////////////////////////////////////////////////////////// 
         CsiDbTypeCode get_data_type() const { return data_type; }

         ////////////////////////////////////////////////////////////
         // set_data_type
         ////////////////////////////////////////////////////////////
         void set_data_type(CsiDbTypeCode data_type_)
         { data_type = data_type_; }

         ////////////////////////////////////////////////////////////
         // get_modifying_command
         //////////////////////////////////////////////////////////// 
         uint4 get_modifying_command() const { return modifying_command; }

         ////////////////////////////////////////////////////////////
         // set_modifying_command
         ////////////////////////////////////////////////////////////
         void set_modifying_command(uint4 modifying_command_)
         { modifying_command = modifying_command_; }

         ////////////////////////////////////////////////////////////
         // get_units
         //////////////////////////////////////////////////////////// 
         StrUni const &get_units() const { return units; }

         ////////////////////////////////////////////////////////////
         // set_units
         ////////////////////////////////////////////////////////////
         void set_units(StrUni const &units_)
         { units = units_; }

         ////////////////////////////////////////////////////////////
         // get_process
         //////////////////////////////////////////////////////////// 
         StrUni const &get_process() const { return process; }

         ////////////////////////////////////////////////////////////
         // set_process
         ////////////////////////////////////////////////////////////
         void set_process(StrUni const &process_)
         { process = process_; }

         ////////////////////////////////////////////////////////////
         // get_dimensions
         //////////////////////////////////////////////////////////// 
         Csi::ArrayDimensions const &get_dimensions() const
         { return dimensions; }

         ////////////////////////////////////////////////////////////
         // set_dimensions
         ////////////////////////////////////////////////////////////
         void set_dimensions(Csi::ArrayDimensions const &dimensions_)
         { dimensions = dimensions_; }

         //@group pieces access methods
         ////////////////////////////////////////////////////////////
         // begin/end
         //////////////////////////////////////////////////////////// 
         const_iterator begin() const { return pieces.begin(); }
         const_iterator end() const { return pieces.end(); }

         ////////////////////////////////////////////////////////////
         // rbegin/rend
         //////////////////////////////////////////////////////////// 
         const_reverse_iterator rbegin() const { return pieces.rbegin(); }
         const_reverse_iterator rend() const { return pieces.rend(); }

         ////////////////////////////////////////////////////////////
         // size
         //////////////////////////////////////////////////////////// 
         size_type size() const { return pieces.size(); }

         ////////////////////////////////////////////////////////////
         // subscript operator
         //////////////////////////////////////////////////////////// 
         piece_type const &operator [](size_type index) const { return pieces[index]; }

         ////////////////////////////////////////////////////////////
         // front/back
         //////////////////////////////////////////////////////////// 
         piece_type const &front() const { return pieces.front(); }
         piece_type const &back() const { return pieces.back(); }

         ////////////////////////////////////////////////////////////
         // empty
         //
         // Returns true if the dimension list is empty
         //////////////////////////////////////////////////////////// 
         bool empty() const { return pieces.empty(); }

         ////////////////////////////////////////////////////////////
         // add_piece
         ////////////////////////////////////////////////////////////
         void add_piece(piece_type const &piece)
         { pieces.push_back(piece); }
         //@endgroup

         ////////////////////////////////////////////////////////////
         // is_scalar
         //
         // Returns true if this column is a scalar (the number of dimensions
         // is one and the size of that dimension is one)
         //////////////////////////////////////////////////////////// 
         bool is_scalar() const 
         { return dimensions.empty(); }
         
         ////////////////////////////////////////////////////////////
         // num_elements
         //
         // Returns the total number of scalar elements stored in this column.
         //////////////////////////////////////////////////////////// 
         uint4 num_elements() const;
         //@endgroup

         ////////////////////////////////////////////////////////////
         // get_string_len
         ////////////////////////////////////////////////////////////
         uint4 get_string_len() const
         { return string_len; }

      private:
         ////////////////////////////////////////////////////////////
         // read_old
         //
         // Reads the old table definitions get acknowledgement
         // message. Returns true on success.
         //////////////////////////////////////////////////////////// 
         bool read_old(Csi::Messaging::Message *msg);

         ////////////////////////////////////////////////////////////
         // read_extended
         //
         // Reads the extended table definitions acknowledgement
         // message. Returns true on success.
         //////////////////////////////////////////////////////////// 
         bool read_extended(Csi::Messaging::Message *msg);
      };
   };
};

#endif
