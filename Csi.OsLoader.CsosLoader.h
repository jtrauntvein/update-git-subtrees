/* Csi.OsLoader.CsosLoader.h

   Copyright (C) 2004, 2011 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Monday 15 March 2004
   Last Change: Thursday 27 January 2011
   Last Commit: $Date: 2011-01-27 12:51:49 -0600 (Thu, 27 Jan 2011) $ 
   Last Changed by: $Author: jon $

*/

#pragma once
#ifndef Csi_OsLoader_CsosLoader_h
#define Csi_OsLoader_CsosLoader_h

#include "Csi.OsLoader.OsLoaderBase.h"
#include "OneShot.h"
#include "Packet.h"
#include "Csi.Win32.ReadFileMapping.h"


namespace Csi
{
   namespace OsLoader
   {
      ////////////////////////////////////////////////////////////
      // class CsosLoader
      //
      // Defines a concrete class that implements the operating system download
      // protocol used by the CSOS utility (for CR10X, CR510, CR500, CR23X, and
      // CSM device types).
      ////////////////////////////////////////////////////////////
      class CsosLoader:
         public OsLoaderBase,
         public OneShotClient
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<OneShot> timer_handle;
         CsosLoader(timer_handle &timer_);
         
         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~CsosLoader();
         
         ////////////////////////////////////////////////////////////
         // get_file_extension
         ////////////////////////////////////////////////////////////
         char const *get_file_extension()
         { return "*.obj"; }
         
         ////////////////////////////////////////////////////////////
         // open_and_validate
         ////////////////////////////////////////////////////////////
         virtual void open_and_validate(
            char const *os_file_name);
         
         ////////////////////////////////////////////////////////////
         // start_send
         ////////////////////////////////////////////////////////////
         virtual void start_send(
            driver_handle driver,
            EventReceiver *client);
         
         ////////////////////////////////////////////////////////////
         // cancel_send
         ////////////////////////////////////////////////////////////
         virtual void cancel_send();
         
         ////////////////////////////////////////////////////////////
         // on_receive
         ////////////////////////////////////////////////////////////
         virtual void on_receive(
            OsLoaderDriver *driver,
            void const *buff,
            uint4 buff_len);
         
      protected:
         ////////////////////////////////////////////////////////////
         // on_complete
         ////////////////////////////////////////////////////////////
         virtual void on_complete(
            char const *message,
            bool succeeded);
         
         ////////////////////////////////////////////////////////////
         // send_status
         ////////////////////////////////////////////////////////////
         void send_status(char const *message);
         
         ////////////////////////////////////////////////////////////
         // onOneShotFired
         ////////////////////////////////////////////////////////////
         virtual void onOneShotFired(
            uint4 event_id);
         
      private:
         ////////////////////////////////////////////////////////////
         // test_for_synch
         ////////////////////////////////////////////////////////////
         void test_for_synch();
         
         ////////////////////////////////////////////////////////////
         // test_for_sig
         ////////////////////////////////////////////////////////////
         void test_for_sig();
         
         ////////////////////////////////////////////////////////////
         // send_next_fragment
         ////////////////////////////////////////////////////////////
         void send_next_fragment();
         
         ////////////////////////////////////////////////////////////
         // on_error
         ////////////////////////////////////////////////////////////
         void on_error(char const *error_message_);
         
      private:
         ////////////////////////////////////////////////////////////
         // os_file_name
         ////////////////////////////////////////////////////////////
         StrAsc os_file_name;
         
         ////////////////////////////////////////////////////////////
         // source
         ////////////////////////////////////////////////////////////
         typedef Win32::ReadFileMapping source_type;
         SharedPtr<source_type> source;
         
         ////////////////////////////////////////////////////////////
         // device_type
         ////////////////////////////////////////////////////////////
         StrAsc device_type;
         
         ////////////////////////////////////////////////////////////
         // device_type_code
         ////////////////////////////////////////////////////////////
         uint2 device_type_code;
         
         ////////////////////////////////////////////////////////////
         // timer
         ////////////////////////////////////////////////////////////
         timer_handle timer;
         
         ////////////////////////////////////////////////////////////
         // view
         ////////////////////////////////////////////////////////////
         byte const *view;
         
         ////////////////////////////////////////////////////////////
         // view_len
         ////////////////////////////////////////////////////////////
         uint4 view_len;
         
         ////////////////////////////////////////////////////////////
         // send_pos
         ////////////////////////////////////////////////////////////
         uint4 send_pos;
         
         ////////////////////////////////////////////////////////////
         // file_sig
         ////////////////////////////////////////////////////////////
         uint2 file_sig;
         
         ////////////////////////////////////////////////////////////
         // state
         ////////////////////////////////////////////////////////////
         enum state_type
         {
            state_standby,
            state_open,
            state_synch1,
            state_synch2,
            state_send,
            state_error,
            state_finish
         } state;
         
         ////////////////////////////////////////////////////////////
         // timer_id
         ////////////////////////////////////////////////////////////
         uint4 timer_id;
         
         ////////////////////////////////////////////////////////////
         // retry_count
         ////////////////////////////////////////////////////////////
         uint4 retry_count;
         
         ////////////////////////////////////////////////////////////
         // receive_packet
         ////////////////////////////////////////////////////////////
         Packet receive_packet;
         
         ////////////////////////////////////////////////////////////
         // last_fragment
         ////////////////////////////////////////////////////////////
         Packet last_fragment;
         
         ////////////////////////////////////////////////////////////
         // fragment_sig
         ////////////////////////////////////////////////////////////
         uint2 fragment_sig;
         
         ////////////////////////////////////////////////////////////
         // error_message
         ////////////////////////////////////////////////////////////
         StrAsc error_message;

         ////////////////////////////////////////////////////////////
         // os_for_logger
         ////////////////////////////////////////////////////////////
         bool os_for_logger;
      };
   };
};


#endif
