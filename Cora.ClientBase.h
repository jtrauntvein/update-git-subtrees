/* Cora.ClientBase.h

   Copyright (C) 2000, 2019 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Thursday 25 May 2000
   Last Change: Tuesday 22 January 2019
   Last Commit: $Date: 2020-12-15 16:40:48 -0600 (Tue, 15 Dec 2020) $ 
   Committed by: $Author: jon $
   
*/

#ifndef Cora_ClientBase_h
#define Cora_ClientBase_h

#include "Csi.Messaging.Node.h"
#include "Csi.Messaging.Router.h"
#include "Csi.Messaging.Message.h"
#include "Csi.SharedPtr.h"
#include "StrUni.h"
#include "Cora.Defs.h"
#include "Csi.VersionNumber.h"
#include <stdexcept>


namespace Cora
{
   /**
    * Defines a base class for all components that will connect to the LoggerNet server.  This base
    * class will implement base connection protocols such as logon and session cloning in behalf of
    * derived classes.  It will also provide event notifications through protected virtual methods.
    */
   class ClientBase: public Csi::Messaging::Node
   {
   public:
      /**
       * Defines the type of exception thrown when the application attempts to change component
       * properties while it is still active.
       */
      class exc_invalid_state: public std::exception
      {
      public:
         exc_invalid_state()
         { trace("exc_invalid_state constructor"); }
         
         virtual char const *what() const throw ()
         { return "Invalid state for attempted operation"; }
      };

   private:
      //@group properties

      /**
       * Specifies the name of the account that is used to log into the server.
       */
      StrUni logon_name;

      /**
       * Spercifies the password that will be used to log into the server.
       */
      StrUni logon_password;

      /**
       * Specifies the name of the application.
       */
      StrUni application_name;

      /**
       * Specifies the currently known access level for this connection.
       */
      uint4 lgrnet_access_level;

      //@endgroup

   public:
      /**
       * Constructor
       */
      ClientBase();

      /**
       * Destructor
       */
      virtual ~ClientBase();

      //@group property access methods
      
      /**
       * @return Returns the login name.
       */
      StrUni const &get_logon_name() const { return logon_name; }

      /**
       * @param logon_name_ Specifies the logon name to be used.
       */
      void set_logon_name(StrUni const &logon_name_);

      /**
       * @return Returns the logon password.
       */
      StrUni const &get_logon_password() const { return logon_password; }

      /**
       * @param logon_password_ Specifies the passowrd to be used for logging in.
       */
      void set_logon_password(StrUni const &logon_password_);

      /**
       * Sets up the component to connect to LoggerNet using an access token or to get a new access
       * token using the refresh token if the access token is expired.
       *
       * @param access_token_ Specifies the access token to be used with the new logon access server
       * transaction. 
       */
      void set_access_token(StrAsc const &access_token_);

      /**
       * @return Returns the access token that will be used or the new access token that was
       * generated by the server on successful logon.
       */
      StrAsc const &get_access_token() const
      { return access_token; }

      /**
       * @return Returns the refresh token that was used or the refresh token returned by the server
       * when loggin in.
       */
      StrAsc const &get_refresh_token() const
      { return refresh_token; }

      /**
       * @return Returns the name of the application.
       */
      StrUni const &get_application_name() const
      { return application_name; }

      /**
       * @param application_name_ Specifies the name of the application.
       */
      void set_application_name(StrUni const &application_name_);
      
      // @endgroup:

      /**
       * Called to start the connection with the server.
       *
       * @param router_ Specifies a newly created connection to the server.
       *
       * @param other_client_ Specifies another component that already has a connection to the
       * server.
       *
       * @param use_own_logon Set to true of this component should perform its own logon.
       */
      typedef Csi::SharedPtr<Csi::Messaging::Router> router_handle;
      virtual void start(router_handle &router_);
      virtual void start(ClientBase *other_client, bool use_own_logon = false);

      /**
       * Called to request that all resources associated with this component be released and any
       * pending transactions be cancelled.
       *
       * @return Returns true if the transactions can be cancelled.
       */
      virtual bool cancel() { return false; }

      /**
       * Called to free any resources associated with this component and to place this component in
       * a standby state.
       */
      virtual void finish();

      /**
       * @return Returns the LgrNet session used by this component.
       */
      uint4 get_net_session() const { return net_session; }

      /**
       * @return Returns the router used for the connection to the server.
       */
      router_handle &get_router() { return router; }

      /**
       * @return Returns the server reported interface version.
       */
      Csi::VersionNumber const &get_interface_version() const
      { return interface_version; }

      /**
       * @return Returns a description of the server.
       */
      StrUni const &get_server_name() const
      { return server_name; }

      /**
       * @return Returns the currently assigned access level for this component.
       */
      uint4 get_lgrnet_access_level() const
      { return lgrnet_access_level; }

   protected:
      // @group: NetNode derived methods
      
      /**
       * Overloads the base class version to handle an incoming message.
       */
      virtual void onNetMessage(
         Csi::Messaging::Router *rtr, Csi::Messaging::Message *msg);

      /**
       * Overloads the base class version to handle the notification of a broken connection.
       */
      virtual void onNetSesBroken(
         Csi::Messaging::Router *rtr, uint4 session_no, uint4 reason, char const *msg);
      //@endgroup

      /**
       * Defines a notification event that will be called when the connection to the server has been
       * successfully established.
       */
      virtual void on_corabase_ready() = 0;

      /**
       * Defines a notification event that will be called when the connection to the server has
       * failed.
       */
      enum corabase_failure_type
      {
         corabase_failure_unknown = 0,
         corabase_failure_logon = 1,
         corabase_failure_session = 2,
         corabase_failure_unsupported = 3,
         corabase_failure_security = 4,
         corabase_failure_invalid_access = 5,
         corabase_failure_access_expired = 6
      };
      virtual void on_corabase_failure(corabase_failure_type failure) = 0;

      /**
       * Defines a notification event that will be called when the session to the server has failed.
       */
      virtual void on_corabase_session_failure()
      { on_corabase_failure(corabase_failure_session); }

      /**
       * Define a notiifcation event that will be called when this component has received
       * notification that a snapshot has been restored.
       */
      virtual void on_snapshot_restored()
      { }

      /**
       * Formats the failure code.
       *
       * @param out Specifies the stream to which the description will be written.
       *
       * @param failure Specifies the failure to format.
       */
      static void describe_failure(
         std::ostream &out, corabase_failure_type failure);

      /**
       * Starts the appropriate login transaction with the server based upon the server's reported
       * interface version.
       */
      virtual void start_logon();
         
   protected:
      /**
       * Specifies the router that maintains the connection with the server.
       */
      router_handle router;

      /**
       * Specifies the session for the LgrNet session.
       */
      uint4 net_session;

      /**
       * Specifies the last transaction number that was used on this session.
       */
      uint4 last_tran_no;

      /**
       * Specifies the state of the connection for this component.
       */
      enum state_type
      {
         corabase_state_standby,
         corabase_state_logging_on,
         corabase_state_ready,
      } state;

      /**
       * Specifies the server interface version.
       */
      Csi::VersionNumber interface_version;

      /**
       * Specifies the description of the server.
       */
      StrUni server_name;

      /**
       * Specifies the access token to be used or the new access token that was returned by the
       * server after logging in.
       */
      StrAsc access_token;

      /**
       * Specifies the refresh token to be used or the refresh token that was returned by the server
       * after logging in.
       */
      StrAsc refresh_token;
   };
};

#endif
