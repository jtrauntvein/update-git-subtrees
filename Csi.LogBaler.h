/* Csi.LogBaler.h

   Copyright (c) 1998, 2020 Campbell Scientific, Inc.
   
   Written by: Jon Trauntvein
   Date Begun: Wednesday 28 January 1998
   Last Change: Wednesday 15 April 2020
   Last Commit: $Date: 2020-04-16 09:32:31 -0600 (Thu, 16 Apr 2020) $ 
   Committed by: $Author: jon $
   
*/

#ifndef Csi_LogBaler_h
#define Csi_LogBaler_h

#include "CsiTypeDefs.h"
#include "StrAsc.h"
#include "Csi.FileStream.h"
#include "Csi.SharedPtr.h"
#include "Csi.LgrDate.h"
#include "Scheduler.h"


namespace Csi
{
   ////////////////////////////////////////////////////////////
   // class LogRecord
   //
   // A virtual base class for all objects that can be streamed to baled files
   ////////////////////////////////////////////////////////////
   class LogRecord
   {
   public:
      ////////////////////////////////////////////////////////////
      // destructor
      ////////////////////////////////////////////////////////////
      virtual ~LogRecord()
      { }

      ////////////////////////////////////////////////////////////
      // format
      //
      // Should be overloaded to format the record in the text stream. 
      ////////////////////////////////////////////////////////////
      virtual void format(std::ostream &out) const = 0;

      ////////////////////////////////////////////////////////////
      // formatReq
      //
      // Returns an estimate regarding the number of bytes required to format the record. This
      // method will be called by the baler to determine if baling should occur before the record is
      // written.
      //////////////////////////////////////////////////////////// 
      virtual uint4 formatReq() const = 0;
   };
   

   ////////////////////////////////////////////////////////////
   // LogRecord insertion operator
   ////////////////////////////////////////////////////////////
   inline std::ostream &operator <<(std::ostream &out, LogRecord const &rec)
   {
      rec.format(out);
      return out;
   }


   ////////////////////////////////////////////////////////////
   // class LogBaler
   //
   // Provides a tool where records can be streamed to a collection of baled
   // text files. Baling can be described as the act of creating a new log file
   // once the current file has grown beyond a specified size. In order to
   // conserve disc space, older log files will be removed when a baling
   // operation takes place.
   ////////////////////////////////////////////////////////////
   class LogBaler: public SchedulerClient
   {
   public:
      ////////////////////////////////////////////////////////////
      // constructor
      //
      // Sets the baling parameters to a default of 1.2 meg for the bale size
      // and 10 for the bale count. The log will be disabled by default. No
      // file will be created until the log is enabled.
      //////////////////////////////////////////////////////////// 
      LogBaler(char const *path_, char const *fileName_);

      ////////////////////////////////////////////////////////////
      // destructor
      //////////////////////////////////////////////////////////// 
      virtual ~LogBaler();

      ////////////////////////////////////////////////////////////
      // setBaleParams
      //
      // Sets the baling parameters. 
      //////////////////////////////////////////////////////////// 
      virtual void setBaleParams(uint4 baleSize_, uint4 baleCnt_);

      ////////////////////////////////////////////////////////////
      // setEnable
      //
      // Sets a variable that enables or disables logging to the file. If the
      // parameter is true, logging will be enabled.
      //////////////////////////////////////////////////////////// 
      virtual void setEnable(bool isEnabled_);

      ////////////////////////////////////////////////////////////
      // isEnabled
      //
      // Returns true if the log is enabled for output
      //////////////////////////////////////////////////////////// 
      bool isEnabled() const { return is_enabled; }

      ////////////////////////////////////////////////////////////
      // set_time_based_baling
      //
      // Can be called to control whether the log file will be baled based on
      // time rather than file size.  
      ////////////////////////////////////////////////////////////
      void set_time_based_baling(
         bool time_based_baling_,
         int8 baling_interval_msec,
         SharedPtr<OneShot> timer = 0);

      ////////////////////////////////////////////////////////////
      // wr
      //
      // Writes the specified record
      //////////////////////////////////////////////////////////// 
      virtual void wr(LogRecord const &rec);
   
      ////////////////////////////////////////////////////////////
      // get_baleSize
      //////////////////////////////////////////////////////////// 
      uint4 get_baleSize() const { return baleSize; }

      ////////////////////////////////////////////////////////////
      // get_baleCnt
      //////////////////////////////////////////////////////////// 
      uint4 get_baleCnt() const { return baleCnt; }

      ////////////////////////////////////////////////////////////
      // get_time_based_baling
      ////////////////////////////////////////////////////////////
      bool get_time_based_baling() const
      { return time_based_baling; }

      ////////////////////////////////////////////////////////////
      // get_bale_interval
      ////////////////////////////////////////////////////////////
      int8 get_baling_interval() const
      { return baling_interval / LgrDate::nsecPerMSec; }

      ////////////////////////////////////////////////////////////
      // onScheduledEvent
      ////////////////////////////////////////////////////////////
      virtual void onScheduledEvent(uint4 id);

      ////////////////////////////////////////////////////////////
      // get_path
      ////////////////////////////////////////////////////////////
      StrAsc const &get_path() const
      { return path; }

      ////////////////////////////////////////////////////////////
      // get_file_name
      ////////////////////////////////////////////////////////////
      StrAsc const &get_file_name() const
      { return fileName; }

      /**
       * Flushes the log to the output and ensures that the output is flushed.
       */
      virtual void flush();
      
   protected:
      ////////////////////////////////////////////////////////////
      // on_log_baled
      //
      // Called when a log file baling operation has been completed
      ////////////////////////////////////////////////////////////
      virtual void on_log_baled(char const *new_path)
      { }

      /**
       * @return Returns true if the specified file name can be used to bale the active file.
       *
       * @param file_name Specifies the candidate file name.
       */
      virtual bool can_use_baled_name(StrAsc const &file_name);
      
      ////////////////////////////////////////////////////////////
      // checkBaling
      //
      // Checks to see if the amount of additional bytes would cause the stream
      // to be baled.
      //////////////////////////////////////////////////////////// 
      void checkBaling(uint4 additional);

      ////////////////////////////////////////////////////////////
      // currentLogSize
      //
      // Returns the file size of the current working log file
      //////////////////////////////////////////////////////////// 
      uint4 currentLogSize();

      ////////////////////////////////////////////////////////////
      // open_output
      //
      // Responsible for opening the output file.
      ////////////////////////////////////////////////////////////
      virtual void open_output();
      
   protected:
      ////////////////////////////////////////////////////////////
      // path
      //
      // Holds the path of the log files
      //////////////////////////////////////////////////////////// 
      StrAsc path;

      ////////////////////////////////////////////////////////////
      // fileName
      //
      // Holds the file name template
      //////////////////////////////////////////////////////////// 
      StrAsc fileName;

      ////////////////////////////////////////////////////////////
      // workFileName
      //
      // Holds the name of the working file
      //////////////////////////////////////////////////////////// 
      StrAsc workFileName;
   
      ////////////////////////////////////////////////////////////
      // baleSize
      //
      // Holds the bale size threshold value
      //////////////////////////////////////////////////////////// 
      uint4 baleSize;

      ////////////////////////////////////////////////////////////
      // baleCnt
      //
      // Holds the maximum number of baled files that will be allowed to
      // accumulate before the oldest is replaced.
      //////////////////////////////////////////////////////////// 
      uint4 baleCnt;

      ////////////////////////////////////////////////////////////
      // output
      //
      // Holds a valid reference to the output stream if the log is enabled for
      // output. If the log is disabled, this reference will be a null pointer.
      //////////////////////////////////////////////////////////// 
      SharedPtr<OFileStream> output;

      ////////////////////////////////////////////////////////////
      // is_enabled
      ////////////////////////////////////////////////////////////
      bool is_enabled;

      ////////////////////////////////////////////////////////////
      // time_based_baling
      //
      // Set to true if this object is to make baling decisions baed upon time
      // rather than based on file size.
      ////////////////////////////////////////////////////////////
      bool time_based_baling;

      ////////////////////////////////////////////////////////////
      // baling_interval
      //
      // Specifies the interval at which time based baling is to occur. 
      ////////////////////////////////////////////////////////////
      int8 baling_interval;

      ////////////////////////////////////////////////////////////
      // last_write
      //
      // Specifies the time when data was last written to this log.  
      ////////////////////////////////////////////////////////////
      Csi::LgrDate last_write;

      ////////////////////////////////////////////////////////////
      // scheduler
      ////////////////////////////////////////////////////////////
      SharedPtr<Scheduler> scheduler;

      ////////////////////////////////////////////////////////////
      // bale_id
      ////////////////////////////////////////////////////////////
      uint4 bale_id;

      ////////////////////////////////////////////////////////////
      // minBaleCnt
      //
      // Specifies the minumum bale count
      //////////////////////////////////////////////////////////// 
      static const uint4 minBaleCnt;

      ////////////////////////////////////////////////////////////
      // minBaleSize
      //
      // Specifies the minimum bale size
      //////////////////////////////////////////////////////////// 
      static const uint4 minBaleSize;
   };
};

#endif
