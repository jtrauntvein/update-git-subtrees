/* Cora.Broker.Toa1FileReader.h

   Copyright (C) 2002, 2016 Campbell Scientific, Inc.

   Written by: Jon Trauntvein
   Date Begun: Thursday 14 August 2003
   Last Change: Monday 11 July 2016
   Last Commit: $Date: 2016-07-11 09:29:07 -0600 (Mon, 11 Jul 2016) $ 
   Last Changed by: $Author: jon $

*/

#ifndef Cora_Broker_Toa1FileReader_h
#define Cora_Broker_Toa1FileReader_h

#include "Cora.Broker.DataFileReader.h"


namespace Cora
{
   namespace Broker
   {
      ////////////////////////////////////////////////////////////
      // class Toa1FileReader
      //
      // Defines a class that parses a TOA1 file in terms of
      // Cora::Broker::record objects.
      ////////////////////////////////////////////////////////////
      class Toa1FileReader: public DataFileReader
      {
      public:
         ////////////////////////////////////////////////////////////
         // default constructor
         //
         // Creates the object in an unopened state
         ////////////////////////////////////////////////////////////
         Toa1FileReader(
            value_factory_handle value_factory = 0);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~Toa1FileReader();

         ////////////////////////////////////////////////////////////
         // open
         //
         // Attempts to open the specified file and sets up the current
         // description based upon information obtained from the file header.
         // If another file is already opened, that file will be closed.
         ////////////////////////////////////////////////////////////
         virtual void open(
            StrAsc const &file_name,
            StrAsc const &labels_file_name);

         ////////////////////////////////////////////////////////////
         // close
         //
         // Closes the currently opened file and invalidates the current
         // description.
         ////////////////////////////////////////////////////////////
         virtual void close();

         ////////////////////////////////////////////////////////////
         // hibernate
         //
         // Overloads the base class version to implement a hibernation
         // operation on the data file.  This implementation will calculate the
         // header signature and store it so that it can be compared when
         // wake_up() is called. 
         ////////////////////////////////////////////////////////////
         virtual void hibernate();

         ////////////////////////////////////////////////////////////
         // wake_up
         //
         // Overloads the base class version to implement the inverse of the
         // hibernate() operation.  The return value will be false if the file
         // could not be reopened or if the header of the file failed to match
         // the stored signature. 
         ////////////////////////////////////////////////////////////
         virtual bool wake_up(bool &all_data_overwritten);

         ////////////////////////////////////////////////////////////
         // read_next_record
         //
         // Attempts to read the next record from the currently opened file.
         // The application is responsible for providing a record object for
         // the data to be read into.  It can create these objects by calling
         // make_record().
         ////////////////////////////////////////////////////////////
         virtual read_outcome_type read_next_record(
            record_handle &destination,
            bool *file_mark_after_record = 0,
            bool *remove_mark_after_record = 0,
            uint4 array_id = 0);

         ////////////////////////////////////////////////////////////
         // generate_index
         ////////////////////////////////////////////////////////////
         virtual void generate_index(index_type &index, bool &should_abort, uint4 *next_record_no);

         ////////////////////////////////////////////////////////////
         // get_header_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_header_len()
         { return header_len; }

         ////////////////////////////////////////////////////////////
         // get_header_sig
         ////////////////////////////////////////////////////////////
         virtual uint2 get_header_sig();

         ////////////////////////////////////////////////////////////
         // get_data_len
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_len();

         ////////////////////////////////////////////////////////////
         // get_data_offset
         ////////////////////////////////////////////////////////////
         virtual int8 get_data_offset();

         ////////////////////////////////////////////////////////////
         // seek_data
         ////////////////////////////////////////////////////////////
         virtual void seek_data(int8 offset, bool search_for_prev = true);
         
      private:
         ////////////////////////////////////////////////////////////
         // file_name
         ////////////////////////////////////////////////////////////
         StrAsc file_name;
         
         ////////////////////////////////////////////////////////////
         // input
         //
         // If not null, refers to the current file that the record description
         // was generated from.
         ////////////////////////////////////////////////////////////
         FILE *input;

         ////////////////////////////////////////////////////////////
         // header_len
         ////////////////////////////////////////////////////////////
         int8 header_len;

         ////////////////////////////////////////////////////////////
         // header_sig
         ////////////////////////////////////////////////////////////
         uint2 header_sig;

         ////////////////////////////////////////////////////////////
         // is_sleeping
         ////////////////////////////////////////////////////////////
         bool is_sleeping;

         ////////////////////////////////////////////////////////////
         // hibernate_pos
         ////////////////////////////////////////////////////////////
         int8 hibernate_pos;

         ////////////////////////////////////////////////////////////
         // data_len
         ////////////////////////////////////////////////////////////
         int8 data_len;

         ////////////////////////////////////////////////////////////
         // data_sig
         ////////////////////////////////////////////////////////////
         uint2 data_sig;
      };
   };
};


#endif
