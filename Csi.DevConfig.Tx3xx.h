/* Csi.DevConfig.Tx3xx.h

   Copyright (C) 2011, 2013 Campbell Scientific, Inc.

   Written by: Jon Trauntvein 
   Date Begun: Monday 03 October 2011
   Last Change: Saturday 04 May 2013
   Last Commit: $Date: 2013-05-04 09:23:51 -0600 (Sat, 04 May 2013) $
   Last Changed by: $Author: jon $

*/

#ifndef Csi_DevConfig_Tx3xx_h
#define Csi_DevConfig_Tx3xx_h

#include "Csi.DevConfig.Session.h"
#include "Csi.VersionNumber.h"


namespace Csi
{
   namespace DevConfig
   {
      // @group class forward declarations
      class Tx3xxSession;
      // @endgroup:

      
      namespace Tx3xxHelpers
      {
         ////////////////////////////////////////////////////////////
         // class TxSettingBase
         ////////////////////////////////////////////////////////////
         class TxSettingBase
         {
         public:
            ////////////////////////////////////////////////////////////
            // setting_id
            ////////////////////////////////////////////////////////////
            uint2 const setting_id;

            ////////////////////////////////////////////////////////////
            // read_command
            ////////////////////////////////////////////////////////////
            StrAsc const read_command;

            ////////////////////////////////////////////////////////////
            // min_version
            ////////////////////////////////////////////////////////////
            VersionNumber const min_version;

            ////////////////////////////////////////////////////////////
            // max_version
            ////////////////////////////////////////////////////////////
            VersionNumber const max_version;

            ////////////////////////////////////////////////////////////
            // supported_sats
            ////////////////////////////////////////////////////////////
            typedef std::list<StrAsc> supported_sats_type;
            supported_sats_type supported_sats;

            ////////////////////////////////////////////////////////////
            // constructor
            ////////////////////////////////////////////////////////////
            static char const *no_supported_sats[];
            TxSettingBase(
               uint2 setting_id_,
               StrAsc const &read_command_,
               VersionNumber const &min_version_ = VersionNumber("3.0"),
               VersionNumber const &max_version_ = VersionNumber("255.255"),
               char const *supported_sats[] = no_supported_sats):
               setting_id(setting_id_),
               read_command(read_command_),
               min_version(min_version_),
               max_version(max_version_)
            {
               for(int i = 0; supported_sats[i] != 0; ++i)
                  this->supported_sats.push_back(supported_sats[i]);
            }

            ////////////////////////////////////////////////////////////
            // destructor
            ////////////////////////////////////////////////////////////
            virtual ~TxSettingBase()
            { }

            ////////////////////////////////////////////////////////////
            // on_response
            //
            // Must be overloaded to handle the response from a read or write
            // command.  
            ////////////////////////////////////////////////////////////
            virtual bool on_response(StrAsc const &response) = 0;

            ////////////////////////////////////////////////////////////
            // write
            //
            // Must be overloaded to write the value to a message body.
            ////////////////////////////////////////////////////////////
            virtual void write(Message &message) = 0;

            ////////////////////////////////////////////////////////////
            // read
            //
            // Must be overloaded to read the value from a message body.
            ////////////////////////////////////////////////////////////
            virtual void read(Message &message) = 0;

            ////////////////////////////////////////////////////////////
            // format_write
            ////////////////////////////////////////////////////////////
            virtual StrAsc format_write()
            { return ""; }

            ////////////////////////////////////////////////////////////
            // is_read_only
            ////////////////////////////////////////////////////////////
            virtual bool is_read_only()
            { return true; }

            ////////////////////////////////////////////////////////////
            // supports_sat
            ////////////////////////////////////////////////////////////
            bool supports_sat(StrAsc const &sat);
         };


         ////////////////////////////////////////////////////////////
         // class Command
         ////////////////////////////////////////////////////////////
         class Command: public OneShotClient
         {
         public:
            ////////////////////////////////////////////////////////////
            // constructor
            ////////////////////////////////////////////////////////////
            Command(
               Tx3xxSession *session_,
               StrAsc const &name_,
               byte tran_no_);

            ////////////////////////////////////////////////////////////
            // destructor
            ////////////////////////////////////////////////////////////
            virtual ~Command();

            ////////////////////////////////////////////////////////////
            // add_setting
            ////////////////////////////////////////////////////////////
            typedef SharedPtr<TxSettingBase> setting_handle;
            void add_setting(setting_handle &setting)
            { settings.push_back(setting); }

            ////////////////////////////////////////////////////////////
            // get_name
            ////////////////////////////////////////////////////////////
            StrAsc const &get_name() const
            { return name; }

            ////////////////////////////////////////////////////////////
            // get_tran_no
            ////////////////////////////////////////////////////////////
            byte get_tran_no() const
            { return tran_no; }

            ////////////////////////////////////////////////////////////
            // start
            ////////////////////////////////////////////////////////////
            void start();

            ////////////////////////////////////////////////////////////
            // on_data
            ////////////////////////////////////////////////////////////
            void on_data(void const *buff, uint4 buff_len);

            ////////////////////////////////////////////////////////////
            // get_response
            ////////////////////////////////////////////////////////////
            StrAsc const &get_response() const
            { return response; }

            ////////////////////////////////////////////////////////////
            // onOneShotFired
            ////////////////////////////////////////////////////////////
            void onOneShotFired(uint4 id);

            ////////////////////////////////////////////////////////////
            // get_outcome
            ////////////////////////////////////////////////////////////
            enum outcome_type
            {
               outcome_unknown = 0,
               outcome_success = 1,
               outcome_synch_failed = 2,
               outcome_no_echo = 3,
               outcome_invalid_response = 4
            };
            outcome_type get_outcome() const
            { return outcome; }

            ////////////////////////////////////////////////////////////
            // on_complete
            ////////////////////////////////////////////////////////////
            virtual void on_complete(outcome_type outcome_);

            ////////////////////////////////////////////////////////////
            // no_transaction
            ////////////////////////////////////////////////////////////
            virtual bool no_transaction() const
            { return false; }
            
            ////////////////////////////////////////////////////////////
            // name
            ////////////////////////////////////////////////////////////
            StrAsc const name;

            ////////////////////////////////////////////////////////////
            // tran_no
            ////////////////////////////////////////////////////////////
            byte const tran_no;

            ////////////////////////////////////////////////////////////
            // session
            ////////////////////////////////////////////////////////////
            Tx3xxSession *session;
            
            ////////////////////////////////////////////////////////////
            // settings
            ////////////////////////////////////////////////////////////
            typedef std::list<setting_handle> settings_type;
            settings_type settings;

            ////////////////////////////////////////////////////////////
            // state
            ////////////////////////////////////////////////////////////
            enum state_type
            {
               state_before_start,
               state_synch,
               state_send_command,
               state_read_response,
               state_no_op,
               state_complete
            } state;

            ////////////////////////////////////////////////////////////
            // response
            ////////////////////////////////////////////////////////////
            StrAsc response;

            ////////////////////////////////////////////////////////////
            // timer_id
            ////////////////////////////////////////////////////////////
            uint4 timer_id;

            ////////////////////////////////////////////////////////////
            // synch_count
            ////////////////////////////////////////////////////////////
            uint4 synch_count;

            ////////////////////////////////////////////////////////////
            // timer
            ////////////////////////////////////////////////////////////
            SharedPtr<OneShot> timer;

            ////////////////////////////////////////////////////////////
            // outcome
            ////////////////////////////////////////////////////////////
            outcome_type outcome;
         };
      };

      
      ////////////////////////////////////////////////////////////
      // class Tx3xxSession
      //
      // Defines an object that emulates a DevConfig device while communicating
      // with a TX312 or TX320 using their ASCII protocols.  
      ////////////////////////////////////////////////////////////
      class Tx3xxSession: public Session
      {
      public:
         ////////////////////////////////////////////////////////////
         // constructor
         ////////////////////////////////////////////////////////////
         Tx3xxSession(
            SharedPtr<SessionDriverBase> driver,
            SharedPtr<OneShot> timer);

         ////////////////////////////////////////////////////////////
         // destructor
         ////////////////////////////////////////////////////////////
         virtual ~Tx3xxSession();

         ////////////////////////////////////////////////////////////
         // add_transaction
         ////////////////////////////////////////////////////////////
         virtual void add_transaction(
            TransactionClient *client,
            message_handle command,
            uint4 max_retry_count,
            uint4 timeout_interval,
            byte tran_no = 0);

         ////////////////////////////////////////////////////////////
         // suspend
         ////////////////////////////////////////////////////////////
         virtual void suspend();

         ////////////////////////////////////////////////////////////
         // on_driver_open
         ////////////////////////////////////////////////////////////
         virtual void on_driver_open();

         ////////////////////////////////////////////////////////////
         // on_driver_data
         ////////////////////////////////////////////////////////////
         virtual void on_driver_data(
            void const *buff, uint4 buff_len);

         ////////////////////////////////////////////////////////////
         // on_driver_failure
         ////////////////////////////////////////////////////////////
         virtual void on_driver_failure();

         ////////////////////////////////////////////////////////////
         // send_data
         ////////////////////////////////////////////////////////////
         void send_data(void const *buff, uint4 buff_len);

         ////////////////////////////////////////////////////////////
         // on_command_complete
         ////////////////////////////////////////////////////////////
         typedef Tx3xxHelpers::Command command_type;
         void on_command_complete(
            command_type *command, command_type::outcome_type outcome);

         ////////////////////////////////////////////////////////////
         // get_timer
         ////////////////////////////////////////////////////////////
         SharedPtr<OneShot> &get_timer()
         { return timer; }

         ////////////////////////////////////////////////////////////
         // receive
         ////////////////////////////////////////////////////////////
         virtual void receive(SharedPtr<Event> &ev);

         ////////////////////////////////////////////////////////////
         // get_transmitter_enabled
         ////////////////////////////////////////////////////////////
         bool get_transmitter_enabled() const
         { return transmitter_enabled; }

         ////////////////////////////////////////////////////////////
         // set_transmitter_enabled
         ////////////////////////////////////////////////////////////
         void set_transmitter_enabled(bool enabled)
         { transmitter_enabled = enabled; }
         
         ////////////////////////////////////////////////////////////
         // set_firmware_version
         ////////////////////////////////////////////////////////////
         void set_firmware_version(SharedPtr<VersionNumber> firmware_version_)
         { firmware_version = firmware_version_; }

         ////////////////////////////////////////////////////////////
         // get_firmware_version
         ////////////////////////////////////////////////////////////
         SharedPtr<VersionNumber> &get_firmware_version()
         { return firmware_version; }

         ////////////////////////////////////////////////////////////
         // get_sat
         ////////////////////////////////////////////////////////////
         StrAsc const &get_sat() const
         { return sat; }

         ////////////////////////////////////////////////////////////
         // set_sat
         ////////////////////////////////////////////////////////////
         void set_sat(StrAsc const &sat_)
         { sat = sat_; }
         
      private:
         ////////////////////////////////////////////////////////////
         // do_next_transaction
         ////////////////////////////////////////////////////////////
         void do_next_transaction();
         
         ////////////////////////////////////////////////////////////
         // do_next_command
         ////////////////////////////////////////////////////////////
         void do_next_command();

         ////////////////////////////////////////////////////////////
         // on_get_settings_cmd
         ////////////////////////////////////////////////////////////
         void on_get_settings_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // send_get_settings_ack
         ////////////////////////////////////////////////////////////
         void send_get_settings_ack();

         ////////////////////////////////////////////////////////////
         // on_set_settings_cmd
         ////////////////////////////////////////////////////////////
         void on_set_settings_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // send_set_settings_ack
         ////////////////////////////////////////////////////////////
         void send_set_settings_ack();
         
         ////////////////////////////////////////////////////////////
         // on_get_setting_fragment_cmd
         ////////////////////////////////////////////////////////////
         void on_get_setting_fragment_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // on_set_setting_fragment_cmd
         ////////////////////////////////////////////////////////////
         void on_set_setting_fragment_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // on_control_cmd
         ////////////////////////////////////////////////////////////
         void on_control_cmd(message_handle &message);

         ////////////////////////////////////////////////////////////
         // send_control_ack
         ////////////////////////////////////////////////////////////
         void send_control_ack();

      private:
         ////////////////////////////////////////////////////////////
         // settings
         //////////////////////////////////////////////////////////// 
         typedef SharedPtr<Tx3xxHelpers::TxSettingBase> setting_handle;
         typedef std::list<setting_handle> settings_type;
         settings_type settings;

         ////////////////////////////////////////////////////////////
         // commands
         //
         // The queue of pending commands
         ////////////////////////////////////////////////////////////
         typedef SharedPtr<command_type> command_handle;
         typedef std::list<command_handle> commands_type;
         commands_type commands;

         ////////////////////////////////////////////////////////////
         // current_command
         ////////////////////////////////////////////////////////////
         command_handle current_command;

         ////////////////////////////////////////////////////////////
         // transactions
         ////////////////////////////////////////////////////////////
         typedef std::pair<message_handle, TransactionClient *> transaction_type;
         typedef std::list<transaction_type> transactions_type;
         transactions_type transactions;

         ////////////////////////////////////////////////////////////
         // last_tran_no
         ////////////////////////////////////////////////////////////
         byte last_tran_no;

         ////////////////////////////////////////////////////////////
         // pending_gets
         ////////////////////////////////////////////////////////////
         settings_type pending_gets;

         ////////////////////////////////////////////////////////////
         // current_control_action
         //
         // Stores the value of the action parameter for the last control command that was
         // processed. 
         ////////////////////////////////////////////////////////////
         byte current_control_action;

         ////////////////////////////////////////////////////////////
         // needs_to_commit
         //
         // Set to true if an operation has taken place that requires a save to take place.
         ////////////////////////////////////////////////////////////
         bool needs_to_commit;

         ////////////////////////////////////////////////////////////
         // set_outcomes
         ////////////////////////////////////////////////////////////
         typedef std::pair<uint2, byte> set_outcome_type;
         typedef std::list<set_outcome_type> set_outcome_types;
         set_outcome_types set_outcomes;

         ////////////////////////////////////////////////////////////
         // transmitter_enabled
         ////////////////////////////////////////////////////////////
         bool transmitter_enabled;

         ////////////////////////////////////////////////////////////
         // firmware_version
         //
         // Keeps track of the firmware version reported by the device.  This
         // value will be initialised the first time that the device is polled
         // and it will be used to determine whether to report CS2 settings
         // instead of CS1 settings. 
         ////////////////////////////////////////////////////////////
         SharedPtr<VersionNumber> firmware_version;

         ////////////////////////////////////////////////////////////
         // sat
         //
         // Keeps track of the satellite configuration for the device.
         ////////////////////////////////////////////////////////////
         StrAsc sat;
      };
   };
};


#endif
