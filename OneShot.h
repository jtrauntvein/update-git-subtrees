/* OneShot.h

    Copyright (c) 1998, 2009 Campbell Scientific, Inc.
    
    Written by: Jon Trauntvein
    Date Begun: Thursday 13 February 1997
    Last Change: Friday 23 October 2009
    Last Commit: $Date: 2009-10-23 14:41:01 -0600 (Fri, 23 Oct 2009) $ 
    Committed by: $Author: jon $
    
*/


#ifndef OneShot_h
#define OneShot_h

#include "Csi.Events.h"
#include "Csi.Thread.h"
#include "Csi.Condition.h"
#include "Csi.InstanceValidator.h"
#include <map>


//@group class forward declarations
class OneShot;
//@endgroup


////////////////////////////////////////////////////////////
// class OneShotClient
//
// Defines the interface expected for a OneShotClient object 
////////////////////////////////////////////////////////////
class OneShotClient: public Csi::InstanceValidator
{
public:
   ////////////////////////////////////////////////////////////
   // constructor
   ////////////////////////////////////////////////////////////
   OneShotClient():
      last_timer_used(0)
   { }
   
   ////////////////////////////////////////////////////////////
   // destructor
   ////////////////////////////////////////////////////////////
   virtual ~OneShotClient();
   
   ////////////////////////////////////////////////////////////
   // onOneShotFired
   //
   // Called when a timer object has been fired. The parameter indicates the identifier for the
   // timer object.
   ////////////////////////////////////////////////////////////
   virtual void onOneShotFired(uint4 id) = 0;

   ////////////////////////////////////////////////////////////
   // last_timer_used
   ////////////////////////////////////////////////////////////
   OneShot *last_timer_used;
};



////////////////////////////////////////////////////////////
// class OneShot
//
// Provides a mechanism whereby client objects can be notified of resetable timed events. It is
// especially useful for creating watch dog timers. 
////////////////////////////////////////////////////////////
class OneShot: public Csi::EventReceiver, public Csi::Thread
{
public:
   ////////////////////////////////////////////////////////////
   // constructor
   //
   // Initialises the windows interface and starts the thread in a disarmed
   // state.
   ////////////////////////////////////////////////////////////
   OneShot();

   ////////////////////////////////////////////////////////////
   // destructor
   ////////////////////////////////////////////////////////////
   virtual ~OneShot();

   ////////////////////////////////////////////////////////////
   // arm
   //
   // Arms the timer for the period in milli-seconds specified. If the reset method is not invoked
   // before this period expires, the client's onOneShotFire method will be invoked. Returns a new
   // timer ID for the event.  Once an event has been fired, it will be removed from the event list.
   ////////////////////////////////////////////////////////////
   uint4 arm(OneShotClient *client, uint4 msec);

   ////////////////////////////////////////////////////////////
   // disarm
   //
   // Disarms the timer event identified by id by removing it from the
   // list. Will also modify the id reference so that it is set to an invalid
   // identifier (0)
   ////////////////////////////////////////////////////////////
   void disarm(uint4 &id);

   ////////////////////////////////////////////////////////////
   // reset
   //
   // resets the timer for the identified event back to its original interval
   ////////////////////////////////////////////////////////////
   void reset(uint4 id);

   ////////////////////////////////////////////////////////////
   // receive
   ////////////////////////////////////////////////////////////
   virtual void receive(Csi::SharedPtr<Csi::Event> &ev);

   ////////////////////////////////////////////////////////////
   // is_working
   //
   // Checks to make sure that the thread is working as expected
   ////////////////////////////////////////////////////////////
   bool is_working() const;

   ////////////////////////////////////////////////////////////
   // disarm_all_for_client
   ////////////////////////////////////////////////////////////
   void disarm_all_for_client(OneShotClient *client);

   ////////////////////////////////////////////////////////////
   // get_time_remaining
   //
   // For the specified timer, evalautes the amount of time remaining.  If the
   // timer is invalid, the return value will be the maximum size integer. 
   ////////////////////////////////////////////////////////////
   uint4 get_time_remaining(uint4 id);

protected:
   ////////////////////////////////////////////////////////////
   // execute
   ////////////////////////////////////////////////////////////
   virtual void execute();

private:
   ////////////////////////////////////////////////////////////
   // class Timer
   //
   // Holds the state for a single timer instance
   ////////////////////////////////////////////////////////////
   class Timer
   {
   public:
      ////////////////////////////////////////////////////////////
      // default constructor
      ////////////////////////////////////////////////////////////
      Timer():
         client(0),
         delay(0),
         base(0),
         id(0)
      { }

      ////////////////////////////////////////////////////////////
      // copy constructor
      ////////////////////////////////////////////////////////////
      Timer(Timer const &other):
         client(other.client),
         delay(other.delay),
         base(other.base),
         id(other.id)
      { }
      
      ////////////////////////////////////////////////////////////
      // client
      //
      // The object that will receive the notification for this timer.
      ////////////////////////////////////////////////////////////
      OneShotClient *client;

      ////////////////////////////////////////////////////////////
      // delay
      //
      // The amount of delay that this timer requires.
      ////////////////////////////////////////////////////////////
      uint4 delay;

      ////////////////////////////////////////////////////////////
      // base
      //
      // The value of counter(0) when this event was last reset or the event was first armed. 
      ////////////////////////////////////////////////////////////
      uint4 base;

      ////////////////////////////////////////////////////////////
      // id
      //
      // The identifier used for this timer
      ////////////////////////////////////////////////////////////
      uint4 id;
   }; 

   
   ////////////////////////////////////////////////////////////
   // events
   //
   // The set of timed events that are currently pending.
   ////////////////////////////////////////////////////////////
   typedef std::map<uint4, Timer> events_type;
   events_type  events;

   ////////////////////////////////////////////////////////////
   // leastWait
   //
   // The minimum number of milli-seconds that the thread should wait when it is next armed.  This
   // value is re-calculated every time that a timer event is received.
   ////////////////////////////////////////////////////////////
   uint4 leastWait;

   ////////////////////////////////////////////////////////////
   // shouldDie
   //
   // Set to true if the thread should be forced to end.
   ////////////////////////////////////////////////////////////
   bool shouldDie;
   
   ////////////////////////////////////////////////////////////
   // forceCycle
   //
   // Set to true if the thread is supposed to immediately cycle rather than going to the timed wait
   // state.  This flag is set when a new timer is added via arm().
   ////////////////////////////////////////////////////////////
   bool forceCycle;            
   
   ////////////////////////////////////////////////////////////
   // arm_event
   //
   // Controls the thread when it is armed and waiting
   ////////////////////////////////////////////////////////////
   Csi::Condition arm_event;

   ////////////////////////////////////////////////////////////
   // die_event
   //
   // Controls the dying process
   ////////////////////////////////////////////////////////////
   Csi::Condition die_event;

   ////////////////////////////////////////////////////////////
   // died_violently
   //
   // Set to indicate that the thread was aborted and has died a violent death.
   ////////////////////////////////////////////////////////////
   bool died_violently;

   ////////////////////////////////////////////////////////////
   // last_timer_id
   //
   // The value for the last time identifier that was used.  This value will be used to calculate
   // new timer identifiers when arm() is called.
   ////////////////////////////////////////////////////////////
   uint4 last_timer_id;

   ////////////////////////////////////////////////////////////
   // timerEvId
   //
   // Identifies the event that is posted when the thread has become disarmed. 
   ////////////////////////////////////////////////////////////
   static uint4 timerEvId;

   ////////////////////////////////////////////////////////////
   // kill
   //
   // kills the thread if it is active
   ////////////////////////////////////////////////////////////
   void kill();

   friend class OneShotClient;
};

#endif
